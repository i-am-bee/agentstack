/**
 * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/agent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Agents */
    get: operations['list_agents_api_v1_agent_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/agent/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Agent Detail */
    get: operations['get_agent_detail_api_v1_agent__name__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/agent/{name}/run': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Run Agent */
    post: operations['run_agent_api_v1_agent__name__run_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/env': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Env */
    get: operations['list_env_api_v1_env_get'];
    /** Update Env */
    put: operations['update_env_api_v1_env_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/env/sync': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Sync Provider Repository
     * @description Sync external changes to an env repository.
     */
    put: operations['sync_provider_repository_api_v1_env_sync_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Providers */
    get: operations['list_providers_api_v1_provider_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Delete Provider */
    post: operations['delete_provider_api_v1_provider_delete_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/install': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Install Provider */
    post: operations['install_provider_api_v1_provider_install_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/logs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stream Logs */
    get: operations['stream_logs_api_v1_provider_logs_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/preview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Preview Provider */
    post: operations['preview_provider_api_v1_provider_preview_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/register/managed': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Managed Provider */
    post: operations['create_managed_provider_api_v1_provider_register_managed_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/register/unmanaged': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add Unmanaged Provider */
    post: operations['add_unmanaged_provider_api_v1_provider_register_unmanaged_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/telemetry': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Config */
    get: operations['read_config_api_v1_telemetry_get'];
    /** Update Config */
    put: operations['update_config_api_v1_telemetry_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Agent
     * @description Definition for an agent.
     */
    Agent: {
      /** Description */
      description?: string | null;
      /** Inputschema */
      inputSchema: Record<string, never>;
      /** Name */
      name: string;
      /** Outputschema */
      outputSchema: Record<string, never>;
    } & {
      [key: string]: unknown;
    };
    /** AgentManifest */
    AgentManifest: {
      /**
       * Env
       * @description For configuration -- passed to the process
       */
      env?: components['schemas']['EnvVar'][];
      /**
       * Manifestversion
       * @default 1
       * @constant
       */
      manifestVersion: 1;
      /** Name */
      name: string;
      /** Ui */
      ui?: Record<string, never> | null;
    } & {
      [key: string]: unknown;
    };
    /** CreateManagedProviderRequest */
    CreateManagedProviderRequest: {
      /** Location */
      location: components['schemas']['GithubProviderLocation'] | components['schemas']['DockerImageProviderLocation'];
    };
    /** DockerImageID */
    DockerImageID: string;
    /** DockerImageProviderLocation */
    DockerImageProviderLocation: components['schemas']['DockerImageID'];
    /** EnvVar */
    EnvVar: {
      /** Description */
      description?: string | null;
      /** Name */
      name: string;
      /**
       * Required
       * @default false
       */
      required: boolean;
    };
    /** GithubProviderLocation */
    GithubProviderLocation: components['schemas']['GithubUrl'];
    /** GithubUrl */
    GithubUrl: string;
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** InstallProviderRequest */
    InstallProviderRequest: {
      /** Id */
      id: string;
    };
    /** ListEnvSchema */
    ListEnvSchema: {
      /** Env */
      env: {
        [key: string]: string;
      };
    };
    /**
     * LoadedProviderStatus
     * @enum {string}
     */
    LoadedProviderStatus: 'not_installed' | 'install_error' | 'installing' | 'starting' | 'ready' | 'running' | 'error';
    /** LoadProviderErrorMessage */
    LoadProviderErrorMessage: {
      /** Message */
      message: string;
    };
    /** PaginatedResponse[Agent] */
    PaginatedResponse_Agent_: {
      /** Items */
      items: components['schemas']['Agent'][];
      /** Total Count */
      total_count: number;
    };
    /** PaginatedResponse[ProviderWithStatus] */
    PaginatedResponse_ProviderWithStatus_: {
      /** Items */
      items: components['schemas']['ProviderWithStatus'][];
      /** Total Count */
      total_count: number;
    };
    /** ProviderRequest */
    ProviderRequest: {
      /** Id */
      id: string;
      /**
       * Location
       * Format: uri
       */
      location: string;
      manifest: components['schemas']['AgentManifest'];
    };
    /** ProviderWithStatus */
    ProviderWithStatus: {
      /** Id */
      id: string;
      last_error?: components['schemas']['LoadProviderErrorMessage'] | null;
      manifest: components['schemas']['AgentManifest'];
      /** Missing Configuration */
      missing_configuration?: components['schemas']['EnvVar'][];
      status: components['schemas']['LoadedProviderStatus'];
    } & {
      [key: string]: unknown;
    };
    /** RootModel[dict[str, Any]] */
    RootModel_dict_str__Any__: Record<string, never>;
    /** UpdateEnvRequest */
    UpdateEnvRequest: {
      /** Env */
      env: {
        [key: string]: string | null;
      };
    };
    /** UpdateTelemetryConfigRequest */
    UpdateTelemetryConfigRequest: {
      /** Sharing Enabled */
      sharing_enabled: boolean;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  list_agents_api_v1_agent_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedResponse_Agent_'];
        };
      };
    };
  };
  get_agent_detail_api_v1_agent__name__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Agent'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  run_agent_api_v1_agent__name__run_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RootModel_dict_str__Any__'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_env_api_v1_env_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ListEnvSchema'];
        };
      };
    };
  };
  update_env_api_v1_env_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEnvRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sync_provider_repository_api_v1_env_sync_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  list_providers_api_v1_provider_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedResponse_ProviderWithStatus_'];
        };
      };
    };
  };
  delete_provider_api_v1_provider_delete_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstallProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  install_provider_api_v1_provider_install_post: {
    parameters: {
      query?: {
        stream?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstallProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  stream_logs_api_v1_provider_logs_get: {
    parameters: {
      query: {
        /** @description Provider ID */
        id: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  preview_provider_api_v1_provider_preview_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateManagedProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderWithStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_managed_provider_api_v1_provider_register_managed_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateManagedProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderWithStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_unmanaged_provider_api_v1_provider_register_unmanaged_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_config_api_v1_telemetry_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  update_config_api_v1_telemetry_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTelemetryConfigRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
