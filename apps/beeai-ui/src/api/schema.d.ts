/**
 * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/a2a/{provider_id}/.well-known/agent.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agent Card */
        get: operations["get_agent_card_api_v1_a2a__provider_id___well_known_agent_json_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/a2a/{provider_id}/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Proxy Request */
        get: operations["proxy_request_api_v1_a2a__provider_id___path__options"];
        /** Proxy Request */
        put: operations["proxy_request_api_v1_a2a__provider_id___path__options"];
        /** Proxy Request */
        post: operations["proxy_request_api_v1_a2a__provider_id___path__options"];
        /** Proxy Request */
        delete: operations["proxy_request_api_v1_a2a__provider_id___path__options"];
        /** Proxy Request */
        options: operations["proxy_request_api_v1_a2a__provider_id___path__options"];
        /** Proxy Request */
        head: operations["proxy_request_api_v1_a2a__provider_id___path__options"];
        /** Proxy Request */
        patch: operations["proxy_request_api_v1_a2a__provider_id___path__options"];
        trace?: never;
    };
    "/api/v1/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload File */
        post: operations["upload_file_api_v1_files_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get File */
        get: operations["get_file_api_v1_files__file_id__get"];
        put?: never;
        post?: never;
        /** Delete File */
        delete: operations["delete_file_api_v1_files__file_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/{file_id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get File Content */
        get: operations["get_file_content_api_v1_files__file_id__content_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/{file_id}/extraction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Text Extraction */
        get: operations["get_text_extraction_api_v1_files__file_id__extraction_get"];
        put?: never;
        /**
         * Create Text Extraction
         * @description Create or return text extraction for a file.
         *
         *     - If extraction is completed, returns existing result
         *     - If extraction failed, retries the extraction
         *     - If extraction is pending/in-progress, returns current status
         *     - If no extraction exists, creates a new one
         */
        post: operations["create_text_extraction_api_v1_files__file_id__extraction_post"];
        /** Delete Text Extraction */
        delete: operations["delete_text_extraction_api_v1_files__file_id__extraction_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/{file_id}/text_content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Text File Content */
        get: operations["get_text_file_content_api_v1_files__file_id__text_content_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Chat Completion */
        post: operations["create_chat_completion_api_v1_llm_chat_completions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Embeddings */
        post: operations["create_embeddings_api_v1_llm_embeddings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Providers */
        get: operations["list_providers_api_v1_providers_get"];
        put?: never;
        /** Create Provider */
        post: operations["create_provider_api_v1_providers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/providers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Provider */
        get: operations["get_provider_api_v1_providers__id__get"];
        put?: never;
        post?: never;
        /** Delete Provider */
        delete: operations["delete_provider_api_v1_providers__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/providers/{id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream Logs */
        get: operations["stream_logs_api_v1_providers__id__logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/providers/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Preview Provider */
        post: operations["preview_provider_api_v1_providers_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ui/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Ui Config */
        get: operations["get_ui_config_api_v1_ui_config_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Variables */
        get: operations["list_variables_api_v1_variables_get"];
        /** Update Variables */
        put: operations["update_variables_api_v1_variables_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vector_stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Vector Store
         * @description Create a new vector store.
         */
        post: operations["create_vector_store_api_v1_vector_stores_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vector_stores/{vector_store_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vector Store
         * @description Get a vector store by ID.
         */
        get: operations["get_vector_store_api_v1_vector_stores__vector_store_id__get"];
        /** Add Items */
        put: operations["add_items_api_v1_vector_stores__vector_store_id__put"];
        post?: never;
        /**
         * Delete Vector Store
         * @description Delete a vector store by ID.
         */
        delete: operations["delete_vector_store_api_v1_vector_stores__vector_store_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vector_stores/{vector_store_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Documents
         * @description List all documents in a vector store.
         */
        get: operations["list_documents_api_v1_vector_stores__vector_store_id__documents_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vector_stores/{vector_store_id}/documents/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Document
         * @description Delete a document by ID.
         */
        delete: operations["delete_document_api_v1_vector_stores__vector_store_id__documents__document_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vector_stores/{vector_store_id}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search With Vector
         * @description Search a vector store using either text or a vector.
         */
        post: operations["search_with_vector_api_v1_vector_stores__vector_store_id__search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Healthcheck */
        get: operations["healthcheck_healthcheck_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AgentCapabilities
         * @description Defines optional capabilities supported by an agent.
         */
        AgentCapabilities: {
            /** Extensions */
            extensions?: components["schemas"]["AgentExtension"][] | null;
            /** Pushnotifications */
            pushNotifications?: boolean | null;
            /** Statetransitionhistory */
            stateTransitionHistory?: boolean | null;
            /** Streaming */
            streaming?: boolean | null;
        };
        /**
         * AgentCard
         * @description An AgentCard conveys key information:
         *     - Overall details (version, name, description, uses)
         *     - Skills: A set of capabilities the agent can perform
         *     - Default modalities/content types supported by the agent.
         *     - Authentication requirements
         */
        "AgentCard-Input": {
            /** Additionalinterfaces */
            additionalInterfaces?: components["schemas"]["AgentInterface"][] | null;
            capabilities: components["schemas"]["AgentCapabilities"];
            /** Defaultinputmodes */
            defaultInputModes: string[];
            /** Defaultoutputmodes */
            defaultOutputModes: string[];
            /** Description */
            description: string;
            /** Documentationurl */
            documentationUrl?: string | null;
            /** Iconurl */
            iconUrl?: string | null;
            /** Name */
            name: string;
            /** Preferredtransport */
            preferredTransport?: string | null;
            /**
             * Protocolversion
             * @default 0.2.5
             */
            protocolVersion: string | null;
            provider?: components["schemas"]["AgentProvider"] | null;
            /** Security */
            security?: {
                [key: string]: string[];
            }[] | null;
            /** Securityschemes */
            securitySchemes?: {
                [key: string]: components["schemas"]["SecurityScheme-Input"];
            } | null;
            /** Skills */
            skills: components["schemas"]["AgentSkill"][];
            /** Supportsauthenticatedextendedcard */
            supportsAuthenticatedExtendedCard?: boolean | null;
            /** Url */
            url: string;
            /** Version */
            version: string;
        };
        /**
         * AgentCard
         * @description An AgentCard conveys key information:
         *     - Overall details (version, name, description, uses)
         *     - Skills: A set of capabilities the agent can perform
         *     - Default modalities/content types supported by the agent.
         *     - Authentication requirements
         */
        "AgentCard-Output": {
            /** Additionalinterfaces */
            additionalInterfaces?: components["schemas"]["AgentInterface"][] | null;
            capabilities: components["schemas"]["AgentCapabilities"];
            /** Defaultinputmodes */
            defaultInputModes: string[];
            /** Defaultoutputmodes */
            defaultOutputModes: string[];
            /** Description */
            description: string;
            /** Documentationurl */
            documentationUrl?: string | null;
            /** Iconurl */
            iconUrl?: string | null;
            /** Name */
            name: string;
            /** Preferredtransport */
            preferredTransport?: string | null;
            /**
             * Protocolversion
             * @default 0.2.5
             */
            protocolVersion: string | null;
            provider?: components["schemas"]["AgentProvider"] | null;
            /** Security */
            security?: {
                [key: string]: string[];
            }[] | null;
            /** Securityschemes */
            securitySchemes?: {
                [key: string]: components["schemas"]["SecurityScheme-Output"];
            } | null;
            /** Skills */
            skills: components["schemas"]["AgentSkill"][];
            /** Supportsauthenticatedextendedcard */
            supportsAuthenticatedExtendedCard?: boolean | null;
            /** Url */
            url: string;
            /** Version */
            version: string;
        };
        /**
         * AgentExtension
         * @description A declaration of an extension supported by an Agent.
         */
        AgentExtension: {
            /** Description */
            description?: string | null;
            /** Params */
            params?: {
                [key: string]: unknown;
            } | null;
            /** Required */
            required?: boolean | null;
            /** Uri */
            uri: string;
        };
        /**
         * AgentInterface
         * @description AgentInterface provides a declaration of a combination of the
         *     target url and the supported transport to interact with the agent.
         */
        AgentInterface: {
            /** Transport */
            transport: string;
            /** Url */
            url: string;
        };
        /**
         * AgentProvider
         * @description Represents the service provider of an agent.
         */
        AgentProvider: {
            /** Organization */
            organization: string;
            /** Url */
            url: string;
        };
        /**
         * AgentSkill
         * @description Represents a unit of capability that an agent can perform.
         */
        AgentSkill: {
            /** Description */
            description: string;
            /** Examples */
            examples?: string[] | null;
            /** Id */
            id: string;
            /** Inputmodes */
            inputModes?: string[] | null;
            /** Name */
            name: string;
            /** Outputmodes */
            outputModes?: string[] | null;
            /** Tags */
            tags: string[];
        };
        /**
         * APIKeySecurityScheme
         * @description API Key security scheme.
         */
        APIKeySecurityScheme: {
            /** Description */
            description?: string | null;
            in: components["schemas"]["In"];
            /** Name */
            name: string;
            /**
             * Type
             * @default apiKey
             * @constant
             */
            type: "apiKey";
        };
        /**
         * AuthorizationCodeOAuthFlow
         * @description Configuration details for a supported OAuth Flow
         */
        AuthorizationCodeOAuthFlow: {
            /** Authorizationurl */
            authorizationUrl: string;
            /** Refreshurl */
            refreshUrl?: string | null;
            /** Scopes */
            scopes: {
                [key: string]: string;
            };
            /** Tokenurl */
            tokenUrl: string;
        };
        /** FileResponse */
        beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__1: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Created By
             * Format: uuid
             */
            created_by: string;
            /** File Size Bytes */
            file_size_bytes?: number | null;
            /** @default user_upload */
            file_type: components["schemas"]["FileType"];
            /** Filename */
            filename: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Parent File Id */
            parent_file_id?: string | null;
        };
        /** FileResponse */
        beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__2: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Created By
             * Format: uuid
             */
            created_by: string;
            /** File Size Bytes */
            file_size_bytes?: number | null;
            /** @default user_upload */
            file_type: components["schemas"]["FileType"];
            /** Filename */
            filename: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Parent File Id */
            parent_file_id?: string | null;
        };
        /** TextExtractionResponse */
        beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__3: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Error Message */
            error_message?: string | null;
            /** Extracted File Id */
            extracted_file_id?: string | null;
            extraction_metadata?: components["schemas"]["ExtractionMetadata"] | null;
            /**
             * File Id
             * Format: uuid
             */
            file_id: string;
            /** Finished At */
            finished_at?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Job Id */
            job_id?: string | null;
            /** Started At */
            started_at?: string | null;
            /** @default pending */
            status: components["schemas"]["ExtractionStatus"];
        };
        /** TextExtractionResponse */
        beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__4: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Error Message */
            error_message?: string | null;
            /** Extracted File Id */
            extracted_file_id?: string | null;
            extraction_metadata?: components["schemas"]["ExtractionMetadata"] | null;
            /**
             * File Id
             * Format: uuid
             */
            file_id: string;
            /** Finished At */
            finished_at?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Job Id */
            job_id?: string | null;
            /** Started At */
            started_at?: string | null;
            /** @default pending */
            status: components["schemas"]["ExtractionStatus"];
        };
        /** VectorStoreResponse */
        beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__5: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Created By
             * Format: uuid
             */
            created_by: string;
            /** Dimension */
            dimension: number;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Last Active At
             * Format: date-time
             */
            last_active_at?: string;
            /** Model Id */
            model_id: string;
            /** Name */
            name?: string | null;
            stats?: components["schemas"]["VectorStoreStats"] | null;
        };
        /** VectorStoreResponse */
        beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__6: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Created By
             * Format: uuid
             */
            created_by: string;
            /** Dimension */
            dimension: number;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Last Active At
             * Format: date-time
             */
            last_active_at?: string;
            /** Model Id */
            model_id: string;
            /** Name */
            name?: string | null;
            stats?: components["schemas"]["VectorStoreStats"] | null;
        };
        /** Body_upload_file_api_v1_files_post */
        Body_upload_file_api_v1_files_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** ChatCompletionMessage */
        ChatCompletionMessage: {
            /**
             * Content
             * @default
             */
            content: string | components["schemas"]["ContentItem"][];
            /**
             * Role
             * @default assistant
             * @enum {string}
             */
            role: "system" | "user" | "assistant" | "function" | "tool";
            /** Tool Call Id */
            tool_call_id?: string | null;
            /** Tool Calls */
            tool_calls?: components["schemas"]["ToolCall"][] | null;
        };
        /** ChatCompletionRequest */
        ChatCompletionRequest: {
            /**
             * Frequency Penalty
             * @default 0
             */
            frequency_penalty: number | null;
            /** Logit Bias */
            logit_bias?: {
                [key: string]: number;
            } | null;
            /** Max Tokens */
            max_tokens?: number | null;
            /** Messages */
            messages: components["schemas"]["ChatCompletionMessage"][];
            /** Model */
            model: string;
            /**
             * N
             * @default 1
             */
            n: number | null;
            /**
             * Presence Penalty
             * @default 0
             */
            presence_penalty: number | null;
            /** Response Format */
            response_format?: {
                [key: string]: unknown;
            } | null;
            /** Stop */
            stop?: string | string[] | null;
            /**
             * Stream
             * @default false
             */
            stream: boolean | null;
            /**
             * Temperature
             * @default 1
             */
            temperature: number | null;
            /** Tool Choice */
            tool_choice?: string | {
                [key: string]: unknown;
            } | null;
            /** Tools */
            tools?: {
                [key: string]: unknown;
            }[] | null;
            /**
             * Top P
             * @default 1
             */
            top_p: number | null;
            /** User */
            user?: string | null;
        };
        /**
         * ClientCredentialsOAuthFlow
         * @description Configuration details for a supported OAuth Flow
         */
        ClientCredentialsOAuthFlow: {
            /** Refreshurl */
            refreshUrl?: string | null;
            /** Scopes */
            scopes: {
                [key: string]: string;
            };
            /** Tokenurl */
            tokenUrl: string;
        };
        /** ContentItem */
        ContentItem: {
            /** Text */
            text: string;
            /**
             * Type
             * @default text
             * @constant
             */
            type: "text";
        };
        /** CreateProviderRequest */
        CreateProviderRequest: {
            agent_card?: components["schemas"]["AgentCard-Input"] | null;
            /** Location */
            location: components["schemas"]["DockerImageProviderLocation"] | components["schemas"]["NetworkProviderLocation"];
        };
        /**
         * CreateVectorStoreRequest
         * @description Request to create a new vector store.
         */
        CreateVectorStoreRequest: {
            /**
             * Dimension
             * @description Dimension of the vectors to be stored
             */
            dimension: number;
            /** Model Id */
            model_id: string;
            /**
             * Name
             * @description Name of the vector store
             */
            name: string;
        };
        /** DockerImageID */
        DockerImageID: string;
        /** DockerImageProviderLocation */
        DockerImageProviderLocation: components["schemas"]["DockerImageID"];
        /**
         * DocumentType
         * @enum {string}
         */
        DocumentType: "platform_file" | "external";
        /** EmbeddingsRequest */
        EmbeddingsRequest: {
            /** Input */
            input: string[] | string;
            /** Model */
            model: string;
        };
        /** EnvVar */
        EnvVar: {
            /** Description */
            description?: string | null;
            /** Name */
            name: string;
            /**
             * Required
             * @default false
             */
            required: boolean;
        };
        /** ExtractionMetadata */
        ExtractionMetadata: {
            /** Backend */
            backend: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * ExtractionStatus
         * @enum {string}
         */
        ExtractionStatus: "pending" | "in_progress" | "completed" | "failed" | "cancelled";
        /**
         * FileSystemRegistryLocation
         * Format: uri
         */
        FileSystemRegistryLocation: string;
        /**
         * FileType
         * @enum {string}
         */
        FileType: "user_upload" | "extracted_text";
        /** FunctionCall */
        FunctionCall: {
            /** Arguments */
            arguments: string;
            /** Name */
            name: string;
        };
        /** GithubRegistryLocation */
        GithubRegistryLocation: components["schemas"]["GithubUrl"];
        /** GithubUrl */
        GithubUrl: string;
        /**
         * HTTPAuthSecurityScheme
         * @description HTTP Authentication security scheme.
         */
        HTTPAuthSecurityScheme: {
            /** Bearerformat */
            bearerFormat?: string | null;
            /** Description */
            description?: string | null;
            /** Scheme */
            scheme: string;
            /**
             * Type
             * @default http
             * @constant
             */
            type: "http";
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ImplicitOAuthFlow
         * @description Configuration details for a supported OAuth Flow
         */
        ImplicitOAuthFlow: {
            /** Authorizationurl */
            authorizationUrl: string;
            /** Refreshurl */
            refreshUrl?: string | null;
            /** Scopes */
            scopes: {
                [key: string]: string;
            };
        };
        /**
         * In
         * @description The location of the API key. Valid values are "query", "header", or "cookie".
         * @enum {string}
         */
        In: "cookie" | "header" | "query";
        /** ListVariablesSchema */
        ListVariablesSchema: {
            /** Env */
            env: {
                [key: string]: string;
            };
        };
        /**
         * NetworkProviderLocation
         * Format: uri
         */
        NetworkProviderLocation: string;
        /**
         * NetworkRegistryLocation
         * Format: uri
         */
        NetworkRegistryLocation: string;
        /**
         * OAuth2SecurityScheme
         * @description OAuth2.0 security scheme configuration.
         */
        "OAuth2SecurityScheme-Input": {
            /** Description */
            description?: string | null;
            flows: components["schemas"]["OAuthFlows"];
            /**
             * Type
             * @default oauth2
             * @constant
             */
            type: "oauth2";
        };
        /**
         * OAuth2SecurityScheme
         * @description OAuth2.0 security scheme configuration.
         */
        "OAuth2SecurityScheme-Output": {
            /** Description */
            description?: string | null;
            flows: components["schemas"]["OAuthFlows"];
            /**
             * Type
             * @default oauth2
             * @constant
             */
            type: "oauth2";
        };
        /**
         * OAuthFlows
         * @description Allows configuration of the supported OAuth Flows
         */
        OAuthFlows: {
            authorizationCode?: components["schemas"]["AuthorizationCodeOAuthFlow"] | null;
            clientCredentials?: components["schemas"]["ClientCredentialsOAuthFlow"] | null;
            implicit?: components["schemas"]["ImplicitOAuthFlow"] | null;
            password?: components["schemas"]["PasswordOAuthFlow"] | null;
        };
        /**
         * OpenIdConnectSecurityScheme
         * @description OpenID Connect security scheme configuration.
         */
        OpenIdConnectSecurityScheme: {
            /** Description */
            description?: string | null;
            /** Openidconnecturl */
            openIdConnectUrl: string;
            /**
             * Type
             * @default openIdConnect
             * @constant
             */
            type: "openIdConnect";
        };
        /** PaginatedResponse[ProviderWithState] */
        PaginatedResponse_ProviderWithState_: {
            /** Items */
            items: components["schemas"]["ProviderWithState"][];
            /** Total Count */
            total_count: number;
        };
        /** PaginatedResponse[VectorStoreDocument] */
        PaginatedResponse_VectorStoreDocument_: {
            /** Items */
            items: components["schemas"]["VectorStoreDocument"][];
            /** Total Count */
            total_count: number;
        };
        /** PaginatedResponse[VectorStoreSearchResult] */
        PaginatedResponse_VectorStoreSearchResult_: {
            /** Items */
            items: components["schemas"]["VectorStoreSearchResult"][];
            /** Total Count */
            total_count: number;
        };
        /**
         * PasswordOAuthFlow
         * @description Configuration details for a supported OAuth Flow
         */
        PasswordOAuthFlow: {
            /** Refreshurl */
            refreshUrl?: string | null;
            /** Scopes */
            scopes: {
                [key: string]: string;
            };
            /** Tokenurl */
            tokenUrl: string;
        };
        /**
         * ProviderDeploymentState
         * @enum {string}
         */
        ProviderDeploymentState: "missing" | "starting" | "ready" | "running" | "error";
        /** ProviderErrorMessage */
        ProviderErrorMessage: {
            /** Message */
            message: string;
        };
        /** ProviderWithState */
        ProviderWithState: {
            agent_card: components["schemas"]["AgentCard-Output"];
            /**
             * Auto Remove
             * @default false
             */
            auto_remove: boolean;
            /**
             * Auto Stop Timeout
             * Format: duration
             * @default PT5M
             */
            auto_stop_timeout: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Env */
            readonly env: components["schemas"]["EnvVar"][];
            /**
             * Id
             * Format: uuid
             */
            readonly id: string;
            /**
             * Last Active At
             * Format: date-time
             */
            last_active_at?: string;
            last_error?: components["schemas"]["ProviderErrorMessage"] | null;
            /** Managed */
            readonly managed: boolean;
            /** Missing Configuration */
            missing_configuration?: components["schemas"]["EnvVar"][];
            /** Registry */
            registry?: components["schemas"]["GithubRegistryLocation"] | components["schemas"]["NetworkRegistryLocation"] | components["schemas"]["FileSystemRegistryLocation"] | null;
            /** Source */
            source: components["schemas"]["DockerImageProviderLocation"] | components["schemas"]["NetworkProviderLocation"];
            state: components["schemas"]["ProviderDeploymentState"];
        } & {
            [key: string]: unknown;
        };
        /**
         * SearchRequest
         * @description Request to search a vector store.
         */
        SearchRequest: {
            /**
             * Limit
             * @description Maximum number of results to return
             * @default 5
             */
            limit: number;
            /**
             * Query Vector
             * @description Vector to search for
             */
            query_vector?: number[];
        };
        /** SecurityScheme */
        "SecurityScheme-Input": components["schemas"]["APIKeySecurityScheme"] | components["schemas"]["HTTPAuthSecurityScheme"] | components["schemas"]["OAuth2SecurityScheme-Input"] | components["schemas"]["OpenIdConnectSecurityScheme"];
        /** SecurityScheme */
        "SecurityScheme-Output": components["schemas"]["APIKeySecurityScheme"] | components["schemas"]["HTTPAuthSecurityScheme"] | components["schemas"]["OAuth2SecurityScheme-Output"] | components["schemas"]["OpenIdConnectSecurityScheme"];
        /** ToolCall */
        ToolCall: {
            function: components["schemas"]["FunctionCall"];
            /** Id */
            id: string;
            /**
             * Type
             * @default function
             * @constant
             */
            type: "function";
        };
        /** UIFeatureFlags */
        UIFeatureFlags: {
            /**
             * User Navigation
             * @default true
             */
            user_navigation: boolean;
        };
        /** UpdateVariablesRequest */
        UpdateVariablesRequest: {
            /** Env */
            env: {
                [key: string]: string | null;
            };
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VectorStoreDocument */
        VectorStoreDocument: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** File Id */
            file_id?: string | null;
            /** Id */
            id: string;
            /** Usage Bytes */
            usage_bytes?: number | null;
            /**
             * Vector Store Id
             * Format: uuid
             */
            vector_store_id: string;
        };
        /**
         * VectorStoreItem
         * @description A single item in a vector store, containing text content and its vector embedding.
         */
        VectorStoreItem: {
            /** Document Id */
            document_id: string;
            /** @default platform_file */
            document_type: components["schemas"]["DocumentType"];
            /** Embedding */
            embedding: number[];
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /** Metadata */
            metadata?: {
                [key: string]: string;
            } | null;
            /**
             * Model Id
             * @default platform
             */
            model_id: string | "platform";
            /** Text */
            text: string;
        };
        /**
         * VectorStoreSearchResult
         * @description Result of a vector store search operation containing full item data and similarity score.
         */
        VectorStoreSearchResult: {
            item: components["schemas"]["VectorStoreItem"];
            /** Score */
            score: number;
        };
        /** VectorStoreStats */
        VectorStoreStats: {
            /** Num Documents */
            num_documents: number;
            /** Usage Bytes */
            usage_bytes: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_agent_card_api_v1_a2a__provider_id___well_known_agent_json_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentCard-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_request_api_v1_a2a__provider_id___path__options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_request_api_v1_a2a__provider_id___path__options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_request_api_v1_a2a__provider_id___path__options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_request_api_v1_a2a__provider_id___path__options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_request_api_v1_a2a__provider_id___path__options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_request_api_v1_a2a__provider_id___path__options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_request_api_v1_a2a__provider_id___path__options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_api_v1_files_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_api_v1_files_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__1"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_file_api_v1_files__file_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__2"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_file_api_v1_files__file_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_file_content_api_v1_files__file_id__content_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_text_extraction_api_v1_files__file_id__extraction_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__4"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_text_extraction_api_v1_files__file_id__extraction_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_text_extraction_api_v1_files__file_id__extraction_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_text_file_content_api_v1_files__file_id__text_content_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_chat_completion_api_v1_llm_chat_completions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatCompletionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_embeddings_api_v1_llm_embeddings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmbeddingsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_providers_api_v1_providers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_ProviderWithState_"];
                };
            };
        };
    };
    create_provider_api_v1_providers_post: {
        parameters: {
            query?: {
                auto_remove?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProviderRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderWithState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_api_v1_providers__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderWithState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_provider_api_v1_providers__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_logs_api_v1_providers__id__logs_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_provider_api_v1_providers_preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProviderRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderWithState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ui_config_api_v1_ui_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIFeatureFlags"];
                };
            };
        };
    };
    list_variables_api_v1_variables_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListVariablesSchema"];
                };
            };
        };
    };
    update_variables_api_v1_variables_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVariablesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_vector_store_api_v1_vector_stores_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVectorStoreRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__5"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vector_store_api_v1_vector_stores__vector_store_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["beeai_server__api__schema__common__EntityModel____class_getitem_____locals___ModelOutput__6"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_items_api_v1_vector_stores__vector_store_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VectorStoreItem"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_vector_store_api_v1_vector_stores__vector_store_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_documents_api_v1_vector_stores__vector_store_id__documents_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_VectorStoreDocument_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_document_api_v1_vector_stores__vector_store_id__documents__document_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                document_id: string;
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_with_vector_api_v1_vector_stores__vector_store_id__search_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_VectorStoreSearchResult_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    healthcheck_healthcheck_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
