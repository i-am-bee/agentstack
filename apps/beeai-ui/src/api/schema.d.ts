/**
 * Copyright 2025 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/env': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Env */
    get: operations['list_env_api_v1_env_get'];
    /** Update Env */
    put: operations['update_env_api_v1_env_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/env/sync': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Sync Provider Repository
     * @description Sync external changes to an env repository.
     */
    put: operations['sync_provider_repository_api_v1_env_sync_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Providers */
    get: operations['list_providers_api_v1_provider_get'];
    put?: never;
    /** Create Provider */
    post: operations['create_provider_api_v1_provider_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Delete Provider */
    post: operations['delete_provider_api_v1_provider_delete_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/preview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Preview Provider */
    post: operations['preview_provider_api_v1_provider_preview_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/sync': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Sync Provider Repository
     * @description Sync external changes to a provider repository.
     */
    put: operations['sync_provider_repository_api_v1_provider_sync_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ContainerProvider */
    ContainerProvider: {
      /** Base File Path */
      base_file_path?: string | null;
      /**
       * Command
       * @description Command with arguments to run
       */
      command?: string[];
      /**
       * Driver
       * @default container
       * @constant
       */
      driver: 'container';
      /**
       * Env
       * @description For configuration -- passed to the process
       */
      env?: components['schemas']['EnvVar'][];
      /**
       * Image
       * @description Container image identifier, e.g. 'docker.io/something/here:latest'
       */
      image: string;
      /** Manifestversion */
      manifestVersion: number;
      /**
       * Mcpendpoint
       * @description Valid for serverType http
       * @default /sse
       */
      mcpEndpoint: string;
      /**
       * @description Valid for serverType http
       * @default sse
       */
      mcpTransport: components['schemas']['McpTransport'];
      /** @default stdio */
      serverType: components['schemas']['ServerType'];
      /** Ui */
      ui?: string[];
    };
    /** CreateProviderRequest */
    CreateProviderRequest: {
      /** Location */
      location: components['schemas']['GitHubManifestLocation'] | components['schemas']['LocalFileManifestLocation'];
    };
    /** EnvVar */
    EnvVar: {
      /** Description */
      description: string;
      /** Name */
      name: string;
      /**
       * Required
       * @default false
       */
      required: boolean;
    };
    /** GitHubManifestLocation */
    GitHubManifestLocation: components['schemas']['GithubUrl'];
    /** GithubUrl */
    GithubUrl: string;
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * LoadedProviderStatus
     * @enum {string}
     */
    LoadedProviderStatus: 'initializing' | 'ready' | 'error' | 'unsupported';
    /** LoadProviderErrorMessage */
    LoadProviderErrorMessage: {
      /** Message */
      message: string;
    };
    /**
     * LocalFileManifestLocation
     * Format: uri
     */
    LocalFileManifestLocation: string;
    /**
     * McpTransport
     * @enum {string}
     */
    McpTransport: 'sse' | 'none';
    /** NodeJsProvider */
    NodeJsProvider: {
      /** Base File Path */
      base_file_path?: string | null;
      /**
       * Command
       * @description Command with arguments to run
       */
      command?: string[];
      /**
       * Driver
       * @default nodejs
       * @constant
       */
      driver: 'nodejs';
      /**
       * Env
       * @description For configuration -- passed to the process
       */
      env?: components['schemas']['EnvVar'][];
      /** Manifestversion */
      manifestVersion: number;
      /**
       * Mcpendpoint
       * @description Valid for serverType http
       * @default /sse
       */
      mcpEndpoint: string;
      /**
       * @description Valid for serverType http
       * @default sse
       */
      mcpTransport: components['schemas']['McpTransport'];
      /**
       * Package
       * @description NPM package or "git+https://..." URL, or "file://..." URL (not allowed in remote manifests)
       */
      package?: string;
      /** @default stdio */
      serverType: components['schemas']['ServerType'];
      /** Ui */
      ui?: string[];
    };
    /** PaginatedResponse[ProviderWithStatus] */
    PaginatedResponse_ProviderWithStatus_: {
      /** Items */
      items: components['schemas']['ProviderWithStatus'][];
      /** Total Count */
      total_count: number;
    };
    /** ProviderWithStatus */
    ProviderWithStatus: {
      /** Id */
      id: string;
      last_error?: components['schemas']['LoadProviderErrorMessage'] | null;
      /** Manifest */
      manifest:
        | components['schemas']['UnmanagedProvider']
        | components['schemas']['NodeJsProvider']
        | components['schemas']['PythonProvider']
        | components['schemas']['ContainerProvider'];
      /** Missing Configuration */
      missing_configuration?: components['schemas']['EnvVar'][];
      registry?: components['schemas']['GithubUrl'] | null;
      status: components['schemas']['LoadedProviderStatus'];
    } & {
      [key: string]: unknown;
    };
    /** PythonProvider */
    PythonProvider: {
      /** Base File Path */
      base_file_path?: string | null;
      /**
       * Command
       * @description Command with arguments to run
       */
      command: string[];
      /**
       * Driver
       * @default python
       * @constant
       */
      driver: 'python';
      /**
       * Env
       * @description For configuration -- passed to the process
       */
      env?: components['schemas']['EnvVar'][];
      /** Manifestversion */
      manifestVersion: number;
      /**
       * Mcpendpoint
       * @description Valid for serverType http
       * @default /sse
       */
      mcpEndpoint: string;
      /**
       * @description Valid for serverType http
       * @default sse
       */
      mcpTransport: components['schemas']['McpTransport'];
      /**
       * Package
       * @description PyPI package or "git+https://..." URL, or "file://..." URL (not allowed in remote manifests)
       */
      package?: string;
      /** Pythonversion */
      pythonVersion?: string | null;
      /** @default stdio */
      serverType: components['schemas']['ServerType'];
      /** Ui */
      ui?: string[];
    };
    /**
     * ServerType
     * @enum {string}
     */
    ServerType: 'stdio' | 'http';
    /** UnmanagedProvider */
    UnmanagedProvider: {
      /** Base File Path */
      base_file_path?: string | null;
      /**
       * Driver
       * @default unmanaged
       * @constant
       */
      driver: 'unmanaged';
      /**
       * Env
       * @description Not supported for unmanaged provider
       */
      env?: components['schemas']['EnvVar'][];
      /** Manifestversion */
      manifestVersion: number;
      /**
       * Mcpendpoint
       * @description Valid for serverType http
       * @default /sse
       */
      mcpEndpoint: string;
      /**
       * @description Valid for serverType http
       * @default sse
       */
      mcpTransport: components['schemas']['McpTransport'];
      /**
       * Servertype
       * @default http
       * @constant
       */
      serverType: 'http';
      /** Ui */
      ui?: string[];
    };
    /** UpdateEnvRequest */
    UpdateEnvRequest: {
      /** Env */
      env: {
        [key: string]: string;
      };
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  list_env_api_v1_env_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  update_env_api_v1_env_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEnvRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sync_provider_repository_api_v1_env_sync_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  list_providers_api_v1_provider_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedResponse_ProviderWithStatus_'];
        };
      };
    };
  };
  create_provider_api_v1_provider_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderWithStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_provider_api_v1_provider_delete_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  preview_provider_api_v1_provider_preview_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderWithStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sync_provider_repository_api_v1_provider_sync_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
}
