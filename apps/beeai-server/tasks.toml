# setup

["beeai-server:setup"]
dir = "{{config_root}}/apps/beeai-server"
run = "uv sync --all-extras --dev"
sources = ["uv.lock", "pyproject.toml"]
outputs = { auto = true }

# check

["beeai-server:check"]
depends = ["beeai-server:check:*"]

["beeai-server:check:pytest-marks"]
depends = ["beeai-server:setup"]
dir = "{{config_root}}/apps/beeai-server"
run = """
#!/bin/bash

# Use pytest to collect tests that are not marked with unit, integration, or e2e
unmarked_tests=$(uv run pytest --collect-only --no-header --no-summary -q -m "not (unit or integration or e2e)" tests/ 2>/dev/null)

if echo "$unmarked_tests" | grep "tests collected" | grep -qv "no tests collected"; then
    echo "ERROR: Found tests without required pytest marks:\n"
    echo "$unmarked_tests" | grep 'tests collected'
    echo ""
    echo "All tests must be marked with @pytest.mark.unit, @pytest.mark.integration, or @pytest.mark.e2e"
    exit 1
else
    echo "✓ All tests have pytest marks"
fi
"""
sources = ["tests/**/*.py"]
outputs = { auto = true }

["beeai-server:check:ruff-check"]
depends = ["beeai-server:setup"]
dir = "{{config_root}}/apps/beeai-server"
run = "uv run ruff check --quiet"
sources = ["src/**/*.py"]
outputs = { auto = true }

["beeai-server:check:ruff-format"]
depends = ["beeai-server:setup"]
dir = "{{config_root}}/apps/beeai-server"
run = "uv run ruff format --quiet --check"
sources = ["src/**/*.py"]
outputs = { auto = true }

# TODO: Enable and fix issues in separate PR
# ["beeai-server:check:pyright"]
# depends = ["beeai-server:setup"]
# dir = "{{config_root}}/apps/beeai-server"
# run = "uv run pyright"
# sources = ["src/**/*.py"]
# outputs = { auto = true }

# fix

["beeai-server:fix"]
depends = ["beeai-server:fix:*"]

["beeai-server:fix:ruff-check"]
depends = ["beeai-server:setup"]
dir = "{{config_root}}/apps/beeai-server"
run = "uv run ruff check --quiet --fix"
sources = ["src/**/*.py"]
outputs = { auto = true }

["beeai-server:fix:ruff-format"]
depends = ["beeai-server:setup"]
dir = "{{config_root}}/apps/beeai-server"
run = "uv run ruff format --quiet"
sources = ["src/**/*.py"]
outputs = { auto = true }

# run

["beeai-server:run"]
depends = ["beeai-server:setup", "beeai-ui:build"]
dir = "{{config_root}}/apps/beeai-server"
run = "uv run beeai-server"

# build

["beeai-server:build"]
alias = "beeai-server:image:build"
depends = ["beeai-server:build:*"]
dir = "{{config_root}}/apps/beeai-server"
run = "docker build -t ghcr.io/i-am-bee/beeai-platform/beeai-server:local . --load"

["beeai-server:build:requirements"]
depends = ["beeai-server:setup"]
dir = "{{config_root}}/apps/beeai-server"
run = "mkdir -p dist && uv export --no-hashes --no-emit-workspace --format requirements-txt > dist/requirements.txt"
sources = ["uv.lock"]
outputs = ["dist/requirements.txt"]

["beeai-server:build:static"]
depends = ["beeai-ui:build"]
dir = "{{config_root}}"
run = "rm -rf apps/beeai-server/src/static 2>/dev/null || true; cp -r apps/beeai-ui/dist apps/beeai-server/src/beeai_server/static"
sources = ["apps/beeai-ui/dist/**/*"]
outputs = ["apps/beeai-server/src/beeai_server/static/**/*"]

["beeai-server:build:sdist"]
depends = ["beeai-server:setup", "beeai-server:build:static"]
dir = "{{config_root}}/apps/beeai-server"
run = "rm ./dist/*.tar.gz 2>/dev/null || true; uv build --sdist --out-dir dist"
sources = ["pyproject.toml", "uv.lock", "src/**/*.py"]
outputs = ["dist/*.tar.gz"]

# migrations

["beeai-server:migrations:run"]
dir = "{{config_root}}/apps/beeai-server"
depends = ["beeai-server:dev:start"]
run = "uv run migrate"

["beeai-server:migrations:alembic"]
dir = "{{config_root}}/apps/beeai-server"
depends = ["beeai-server:dev:start"]
run = """
#!/bin/bash
set -a
source .env
set +a

cd src/beeai_server/infrastructure/persistence/migrations
alembic {{arg(name="alembic_vars", var=true)}}
"""

["beeai-server:migrations:generate"]
dir = "{{config_root}}/apps/beeai-server"
depends = ["beeai-server:dev:start"]
run = "mise run beeai-server:migrations:alembic revision --autogenerate"

# dev

["beeai-server:dev:start"]
dir = "{{config_root}}/apps/beeai-server"
depends = ["beeai-server:build"]
run = """
#!/bin/bash
set -e

NAMESPACE=default
VM_NAME='{{option(name="vm-name", default="beeai-local-dev")}}'
KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"
LIMA_HOME=~/.beeai/lima

export KUBECONFIG
export LIMA_HOME

[[ ! -f .env ]] && cp template.env .env

tele="telepresence --use .*${NAMESPACE}.*"
($tele list --replacements 2>/dev/null | grep -q platform) && echo "Dev environment already running" && exit

# Stopping all platform deployments
{{ mise_bin }} run beeai-server:dev:stop

extra_flags=()

if [ '{{flag(name='no-registry')}}' = 'true' ]; then
  extra_flags+=("--set" "externalRegistries=null")
fi

if [ '{{flag(name='docling')}}' = 'true' ]; then
  extra_flags+=("--set" "docling.enabled=true")
fi

if [ '{{flag(name='phoenix')}}' = 'true' ]; then
  extra_flags+=("--set" "phoenix.enabled=true")
fi

{{ mise_bin }} run beeai-cli:run -- platform start \
    --vm-name=${VM_NAME} \
    --import ghcr.io/i-am-bee/beeai-platform/beeai-server:local \
    --set image.tag=local "${extra_flags[@]}"

$tele helm install || true
$tele connect --namespace "$NAMESPACE"
$tele replace beeai-platform --port 18333:8333
"""

["beeai-server:dev:shell"]
raw = true
shell = "echo"
dir = "{{cwd}}"
run = """
if [[ -n "$__OLD_PS1" ]]; then
  echo "Environment for 'beeai-local-dev' is already activated. To deactivate, type 'deactivate'."
  return 0
fi

VM_NAME={{option(name="vm-name", default="beeai-local-dev")}}
echo "Activating environment for '$VM_NAME'..."

export __OLD_PS1="$PS1"
export __OLD_LIMA_HOME="$LIMA_HOME"
export __OLD_KUBECONFIG="$KUBECONFIG"

export KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"
export LIMA_HOME=~/.beeai/lima
export PS1="(${VM_NAME}) ${__OLD_PS1}"

deactivate () {
  export PS1="$__OLD_PS1"

  # Restore LIMA_HOME to its original state (set or unset)
  [[ -n "$__OLD_LIMA_HOME" ]] && export LIMA_HOME="$__OLD_LIMA_HOME" || unset LIMA_HOME
  [[ -n "$__OLD_KUBECONFIG" ]] && export KUBECONFIG="$__OLD_KUBECONFIG" || unset KUBECONFIG

  # Clean up the backup values
  unset __OLD_PS1
  unset __OLD_LIMA_HOME
  unset __OLD_KUBECONFIG
  unset -f deactivate
  echo "Environment for '$VM_NAME' deactivated."
}
"""

["beeai-server:dev:stop"]
dir = "{{config_root}}/apps/beeai-server"
run = """
#!/bin/bash
NAMESPACE=default

telepresence --use ".*${NAMESPACE}.*" uninstall --all-agents || true

# Stop all lima VMs
{% raw %}
LIMA_HOME=~/.beeai/lima limactl list -f '{{.Name}}' 2>/dev/null | sed '/^[^a-z]*$/d' | \
    xargs -rn 1 -I"{}" \
    {{ mise_bin }} run beeai-cli:run -- platform stop --vm-name="{}"
{% endraw %}

telepresence --use ".*${NAMESPACE}.*" quit
"""

["beeai-server:dev:clean"]
dir = "{{config_root}}/apps/beeai-server"
run = """
VM_NAME={{option(name="vm-name", default="beeai-local-dev")}}
{{ mise_bin }} run beeai-cli:run -- platform delete --vm-name="$VM_NAME"
"""

["beeai-server:dev:reconnect"]
dir = "{{config_root}}/apps/beeai-server"
run = """
#!/bin/bash

VM_NAME='{{option(name="vm-name", default="beeai-local-dev")}}'
NAMESPACE=default

export KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"

tele="telepresence --use .*${NAMESPACE}.*"

$tele uninstall --all-agents || true
$tele quit

$tele connect --namespace "$NAMESPACE"
$tele replace beeai-platform --port 18333:8333
"""

["beeai-server:dev:test:start"]
dir = "{{config_root}}/apps/beeai-server"
run = "{{ mise_bin }} run beeai-server:dev:start --vm-name=beeai-local-test --no-registry"

["beeai-server:dev:test:clean"]
dir = "{{config_root}}/apps/beeai-server"
run = "{{ mise_bin }} run beeai-server:dev:clean --vm-name=beeai-local-test"

["beeai-server:dev:test:shell"]
dir = "{{config_root}}/apps/beeai-server"
run = "{{ mise_bin }} run beeai-server:dev:shell --vm-name=beeai-local-test"

["beeai-server:dev:test:reconnect"]
dir = "{{config_root}}/apps/beeai-server"
run = "{{ mise_bin }} run beeai-server:dev:reconnect --vm-name=beeai-local-test"

["beeai-server:test:e2e"]
depends = ["beeai-server:build"]
dir = "{{config_root}}/apps/beeai-server"
run = """
#!/bin/bash

{{ mise_bin }} run beeai-server:dev:stop
{{ mise_bin }} run beeai-cli:run -- platform delete --vm-name=${VM_NAME}
curl http://localhost:8333 >/dev/null 2>&1 && echo "Another instance at localhost:8333 is already running" && exit 2

VM_NAME=e2e-test-run
{{ mise_bin }} run beeai-cli:run -- platform start -v \
    --vm-name=${VM_NAME} \
    --import ghcr.io/i-am-bee/beeai-platform/beeai-server:local \
    --set image.tag=local \
    --set externalRegistries=null \
    --set docling.enabled=true

export KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"
export SERVER_URL="http://localhost:8333"
export DB_URL="postgresql+asyncpg://beeai-user:password@localhost:5432/beeai"

export LLM_API_BASE="${LLM_API_BASE:-http://host.docker.internal:11434/v1}"

kubectl port-forward svc/postgresql 5432:5432 2>/dev/null 1>&2 &
uv run pytest -m e2e
result=$?

if [ $result -ne 0 ]; then
    echo "Tests failed. Checking pod status..."
    echo "------------- pods --------------"
    kubectl get pod
    echo "------------ events -------------"
    kubectl get event
fi

{{ mise_bin }} run beeai-cli:run -- platform delete --vm-name=${VM_NAME}
kill %1
exit $result
"""

["beeai-server:test:integration"]
dir = "{{config_root}}/apps/beeai-server"
depends = ["beeai-server:build"]
run = """
#!/bin/bash
VM_NAME=itegration-test-run
{{ mise_bin }} run beeai-server:dev:start --vm-name="$VM_NAME" --no-registry
export KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"

uv run pytest -m integration
result=$?
exit $result
"""
