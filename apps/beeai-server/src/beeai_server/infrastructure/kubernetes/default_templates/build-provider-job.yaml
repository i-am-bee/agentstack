apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ provider_build_name }}"
  labels:
    app: "{{ provider_build_label }}"
    managedBy: beeai-platform
spec:
  backoffLimit: 0
  activeDeadlineSeconds: {{ job_timeout_seconds }}
  ttlSecondsAfterFinished: 60
  template:
    spec:
      imagePullSecrets:
        - name: beeai-platform-registry-secret
      securityContext:
        fsGroup: {{ sandbox_fs_group }}
        runAsGroup: {{ sandbox_run_as_group }}
        runAsUser: {{ sandbox_run_as_user }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      {% if sandbox_runtime_class %}
      runtimeClassName: "{{ sandbox_runtime_class }}"
      {% endif %}
      restartPolicy: Never
      initContainers:
        - name: git-clone
          image: ghcr.io/i-am-bee/alpine/git:v2.49.1
          command: [ "/bin/sh" ]
          env:
            - name: GIT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "{{ git_token_secret_name }}"
                  key: GIT_TOKEN
                  optional: true
          args:
            - -c
            - |
              echo "Cloning repository..."
              # Check if GitHub token is available for this host
              if [ -n "$GIT_TOKEN" ]; then
                echo "Using authenticated clone for {{ git_host }}"
              else
                echo "Using unauthenticated clone for {{ git_host }}"
              fi
              git clone --depth 1 \
                --revision {{ git_ref }} \
                "https://$GIT_TOKEN@{{ git_host }}/{{ git_org }}/{{ git_repo }}.git" \
                /tmp/repo
              mv "/tmp/repo/{{ git_path }}"/* /workspace/ 2>/dev/null || true
              mv "/tmp/repo/{{ git_path }}"/.[^.]* /workspace/ 2>/dev/null || true
              echo "Repository cloned successfully"
              ls -la /workspace
          volumeMounts:
            - name: workspace
              mountPath: /workspace
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsUser: {{ sandbox_run_as_user }}
            runAsGroup: {{ sandbox_run_as_group }}
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
        # Build image with Kaniko (no securityContext required)
        - name: kaniko-build
          image: ghcr.io/kaniko-build/dist/chainguard-dev-kaniko/executor:v1.25.2-slim
          args:
            - --context=/workspace
            - "--dockerfile=/workspace/{{ dockerfile_path }}"
            - --no-push
            - --tar-path=/tmp/image.tar
          volumeMounts:
            - name: workspace
              mountPath: /workspace
            - name: image-tar
              mountPath: /tmp
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
        # Main container: Step 3 Push the intermediary image
        - name: crane-push
          image: ghcr.io/i-am-bee/alpine/crane:0.20.6
          env:
            - name: DOCKER_CONFIG
              value: /tmp/.docker
          args:
            - push
            - /tmp/image.tar
            - "{{ destination }}"
            - --insecure
          volumeMounts:
            - name: image-tar
              mountPath: /tmp
            - name: docker-config
              mountPath: /tmp/.docker/config.json
              subPath: .dockerconfigjson
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsUser: {{ sandbox_run_as_user }}
            runAsGroup: {{ sandbox_run_as_group }}
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        - name: run-agent
          image: "{{ destination }}"
          restartPolicy: Always # This makes it a daemon sidecar container
          env:
            - name: PORT
              value: "8000"
            - name: HOST
              value: "0.0.0.0"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsUser: {{ sandbox_run_as_user }}
            runAsGroup: {{ sandbox_run_as_group }}
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
      containers:
        # Main container: Step 3 - Mutate and push final image
        - name: mutate
          image: ghcr.io/i-am-bee/alpine/crane:0.20.6
          env:
            - name: DOCKER_CONFIG
              value: /tmp/.docker
          command:
            - /bin/sh
            - -c
            - |
              # Extract agent manifest
              for i in $(seq 1 30); do
                if nc -z 127.0.0.1 8000; then
                  break
                fi
                echo "Waiting for server to start... (attempt $i/10)"
                sleep 1
              done
              
              AGENT_CARD_CONTENT=$(wget -O - http://127.0.0.1:8000/.well-known/agent-card.json)
              if [ $? -eq 0 ] && [ -n "$AGENT_CARD_CONTENT" ]; then
                echo "Successfully extracted agent-card.json"
                echo "Content preview:"
                echo "$AGENT_CARD_CONTENT" | head -n 10
              else
                echo "Failed to extract agent-card.json"
                exit 1
              fi
              
              echo "Starting image mutation..."
              echo "Extraction complete!"
              
              LABEL_CONTENT=$(echo -n "$AGENT_CARD_CONTENT" | base64 -w 0)
              echo "Label content size: $(echo -n $LABEL_CONTENT | wc -c) bytes"
              crane mutate --insecure {{ destination }} \
                --label "beeai.dev.agent.json=${LABEL_CONTENT}"

          volumeMounts:
            - name: docker-config
              mountPath: /tmp/.docker/config.json
              subPath: .dockerconfigjson
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsUser: {{ sandbox_run_as_user }}
            runAsGroup: {{ sandbox_run_as_group }}
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"

      volumes:
        - name: workspace
          emptyDir: { }
        - name: image-tar
          emptyDir: { }
        - name: docker-config
          secret:
            secretName: beeai-platform-registry-secret
