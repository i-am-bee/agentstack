# Copyright 2025 Â© BeeAI a Series of LF Projects, LLC
# SPDX-License-Identifier: Apache-2.0

"""empty message

Revision ID: 246e011dd64e
Revises: b8f8a7190ab9
Create Date: 2025-06-24 12:54:55.723557

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "246e011dd64e"
down_revision: Union[str, None] = "b8f8a7190ab9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "vector_stores",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=True),
        sa.Column("model_id", sa.String(length=256), nullable=False),
        sa.Column("dimension", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_active_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["created_by"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "vector_store_documents",
        sa.Column("id", sa.String(length=256), nullable=False),
        sa.Column("vector_store_id", sa.UUID(), nullable=False),
        sa.Column("usage_bytes", sa.Integer(), nullable=True),
        sa.Column("file_id", sa.UUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["file_id"], ["files.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["vector_store_id"], ["vector_stores.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "vector_store_id", name="vector_store_documents_pk"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    op.execute("DROP TABLE IF EXISTS vector_store_documents CASCADE")
    op.execute("DROP TABLE IF EXISTS vector_stores CASCADE")
