# Copyright 2025 Â© BeeAI a Series of LF Projects, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Add procrastinate initial migrations

Revision ID: 638be28ea3f9
Revises: be5ec6ff3271
Create Date: 2025-06-19 13:58:36.996259

"""

from pathlib import Path
from typing import Sequence, Union

import sqlparse
from alembic import op

from beeai_server import get_configuration

# revision identifiers, used by Alembic.
revision: str = "638be28ea3f9"
down_revision: Union[str, None] = "be5ec6ff3271"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    procrastinate_schema = get_configuration().persistence.procrastinate_schema
    op.execute(f"CREATE SCHEMA IF NOT EXISTS {procrastinate_schema}")
    op.execute(f"SET search_path TO {procrastinate_schema}")
    schema = (Path(__file__).parent / "procrastinate.sql").read_text("utf-8")
    for statement in sqlparse.split(schema):
        op.execute(statement)
    op.execute("SET search_path TO public")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(f"DROP SCHEMA IF EXISTS {get_configuration().persistence.procrastinate_schema} CASCADE")
