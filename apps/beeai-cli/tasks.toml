# setup

["beeai-cli:setup"]
dir = "{{config_root}}/apps/beeai-cli"
run = "uv sync --all-extras --dev"
sources = ["uv.lock", "pyproject.toml"]
outputs = { auto = true }

# check

["beeai-cli:check"]
depends = ["beeai-cli:check:*"]

["beeai-cli:check:ruff-check"]
depends = ["beeai-cli:setup"]
dir = "{{config_root}}/apps/beeai-cli"
run = "uv run python -m ruff check --quiet"
sources = ["src/**/*.py"]
outputs = { auto = true }

["beeai-cli:check:ruff-format"]
depends = ["beeai-cli:setup"]
dir = "{{config_root}}/apps/beeai-cli"
run = "uv run python -m ruff format --quiet --check"
sources = ["src/**/*.py"]
outputs = { auto = true }

# TODO: Enable and fix issues in separate PR
# ["beeai-cli:check:pyright"]
# dir = "{{config_root}}/apps/beeai-cli"
# run = "uv run python -m pyright"
# sources = ["src/**/*.py"]
# outputs = { auto = true }

# fix

["beeai-cli:fix"]
depends = ["beeai-cli:fix:*"]

["beeai-cli:fix:ruff-check"]
depends = ["beeai-cli:setup"]
dir = "{{config_root}}/apps/beeai-cli"
run = "uv run python -m ruff check --quiet --fix"
sources = ["src/**/*.py"]
outputs = { auto = true }

["beeai-cli:fix:ruff-format"]
depends = ["beeai-cli:setup"]
dir = "{{config_root}}/apps/beeai-cli"
run = "uv run python -m ruff format --quiet"
sources = ["src/**/*.py"]
outputs = { auto = true }

# run

["beeai-cli:run"]
description = "NOTE: Use double dash to pass extra args, like `mise beeai-cli:run -- provider list`"
depends = ["beeai-cli:setup", "beeai-cli:build:copy-helm-chart"]
dir = "{{config_root}}/apps/beeai-cli"
run = "uv run beeai"

# build

["beeai-cli:build:download-binaries"]
dir = "{{config_root}}/apps/beeai-cli"
run = '''
set -e
LIMA_VERSION=$(yq -r '.tools["asdf:CrouchingMuppet/asdf-lima"]' ../../mise.toml)
mkdir -p ./vendor
echo '*' >./vendor/.gitignore
( test -f ./vendor/lima-$LIMA_VERSION/manylinux_2_28_x86_64/bin/limactl  || ( mkdir -p ./vendor/lima-$LIMA_VERSION/manylinux_2_28_x86_64  && curl -fsL -H "Authorization: Bearer $GITHUB_TOKEN" https://github.com/lima-vm/lima/releases/download/v${LIMA_VERSION}/lima-${LIMA_VERSION}-Linux-x86_64.tar.gz  | tar -xzf - -C ./vendor/lima-$LIMA_VERSION/manylinux_2_28_x86_64  )) &
( test -f ./vendor/lima-$LIMA_VERSION/manylinux_2_28_aarch64/bin/limactl || ( mkdir -p ./vendor/lima-$LIMA_VERSION/manylinux_2_28_aarch64 && curl -fsL -H "Authorization: Bearer $GITHUB_TOKEN" https://github.com/lima-vm/lima/releases/download/v${LIMA_VERSION}/lima-${LIMA_VERSION}-Linux-aarch64.tar.gz | tar -xzf - -C ./vendor/lima-$LIMA_VERSION/manylinux_2_28_aarch64 )) &
( test -f ./vendor/lima-$LIMA_VERSION/macosx_12_0_x86_64/bin/limactl     || ( mkdir -p ./vendor/lima-$LIMA_VERSION/macosx_12_0_x86_64     && curl -fsL -H "Authorization: Bearer $GITHUB_TOKEN" https://github.com/lima-vm/lima/releases/download/v${LIMA_VERSION}/lima-${LIMA_VERSION}-Darwin-x86_64.tar.gz | tar -xzf - -C ./vendor/lima-$LIMA_VERSION/macosx_12_0_x86_64     )) &
( test -f ./vendor/lima-$LIMA_VERSION/macosx_12_0_arm64/bin/limactl      || ( mkdir -p ./vendor/lima-$LIMA_VERSION/macosx_12_0_arm64      && curl -fsL -H "Authorization: Bearer $GITHUB_TOKEN" https://github.com/lima-vm/lima/releases/download/v${LIMA_VERSION}/lima-${LIMA_VERSION}-Darwin-arm64.tar.gz  | tar -xzf - -C ./vendor/lima-$LIMA_VERSION/macosx_12_0_arm64      )) &
wait
'''

["beeai-cli:build:copy-helm-chart"]
depends = ["helm:build"]
dir = "{{config_root}}/apps/beeai-cli"
run = "rm ./src/beeai_cli/data/helm-chart.tgz 2>/dev/null || true && cp {{config_root}}/helm/dist/beeai-platform-*.tgz ./src/beeai_cli/data/helm-chart.tgz"
sources = ["{{config_root}}/helm/dist/beeai-platform-*.tgz"]
outputs = ["./src/beeai_cli/data/helm-chart.tgz"]

["beeai-cli:build"]
depends = ["beeai-cli:setup", "beeai-cli:build:*"]
dir = "{{config_root}}/apps/beeai-cli"
sources = ["src/**/*", "hatch_build.py", "pyproject.toml", "vendor/lima/**/*"]
outputs = ["dist/**/*"]
run = '''
#!/usr/bin/env bash
set -euo pipefail

# Build sdist and wheel
rm -rf ./dist
uv build -q --out-dir ./dist
export lima_version=$(yq -r '.tools["asdf:CrouchingMuppet/asdf-lima"]' ../../mise.toml)
export version="$(yq -r '.project.version' pyproject.toml | tr -d -)"
export universal_wheel=$(realpath "./dist/beeai_cli-$version-py3-none-any.whl")

# Pin versions from uv.lock in wheel
tmpdir="$(mktemp -d)"
unzip -q "$universal_wheel" "beeai_cli-${version}.dist-info/METADATA" -d "$tmpdir"
insert_line=$(awk '/^Requires-Dist:/ {print FNR-1; exit}' "$tmpdir/beeai_cli-${version}.dist-info/METADATA" | cut -d: -f1)
(
  head -n $insert_line "$tmpdir/beeai_cli-${version}.dist-info/METADATA"
  uv export --no-hashes --no-emit-workspace --format requirements-txt | awk '/^[[:space:]]*#/ {next} NF {print "Requires-Dist: " $0 }'
  awk -v insert_line="$insert_line" 'NR > insert_line && $0 !~ /^Requires-Dist:/' "$tmpdir/beeai_cli-${version}.dist-info/METADATA"
) > "$tmpdir/beeai_cli-${version}.dist-info/METADATA.new"
mv "$tmpdir/beeai_cli-${version}.dist-info/METADATA.new" "$tmpdir/beeai_cli-${version}.dist-info/METADATA"
(cd "$tmpdir" && zip -q "$universal_wheel" "beeai_cli-${version}.dist-info/METADATA")

# Verify that the wheel works
if [[ "$(uv tool run --quiet --isolated --with "$universal_wheel" -- beeai version)" != "beeai-cli version: $version" ]]; then
  echo "Failed to install $universal_wheel"
  exit 1
fi

# Make platform-specific wheels by bundling limactl
build_wheel() {
  wheel_tag="$1"
  hostagent_arch="$2"
  tmpdir="$(mktemp -d)"
  platform_wheel="$(realpath "./dist")/beeai_cli-$version-py3-none-$wheel_tag.whl"
  cp "$universal_wheel" "$platform_wheel"
  unzip -q "$universal_wheel" "beeai_cli-$version.dist-info/WHEEL" -d "$tmpdir"
  perl -pi -e "s/Root-Is-Purelib: true/Root-Is-Purelib: false/" "$tmpdir/beeai_cli-$version.dist-info/WHEEL"
  perl -pi -e "s/Tag: .*/Tag: py3-none-$wheel_tag/" "$tmpdir/beeai_cli-$version.dist-info/WHEEL"
  mkdir -p "$tmpdir/beeai_cli/data"
  cp "./vendor/lima-$lima_version/$wheel_tag/bin/limactl" "./vendor/lima-$lima_version/$wheel_tag/share/lima/lima-guestagent.Linux-$hostagent_arch"* "$tmpdir/beeai_cli/data"
  (cd "$tmpdir" && zip -q "$platform_wheel" -r .)
  rm -rf "$tmpdir"
}
build_wheel manylinux_2_28_x86_64  x86_64  &
build_wheel manylinux_2_28_aarch64 aarch64 &
build_wheel macosx_12_0_x86_64     x86_64  &
build_wheel macosx_12_0_arm64      aarch64 &
for job in $(jobs -p); do wait $job; done
'''

# clean

["beeai-cli:clean"]
dir = "{{config_root}}/apps/beeai-cli"
run = "rm -rf ./dist"
