[tools]
# runtime
"asdf:CrouchingMuppet/asdf-lima" = "1.1.1" # using lima from asdf since the aqua one fails to install in CI

# Python
python = "3.13"
uv = "0.7.19"

# Node.js
nodejs = "22"
pnpm = "latest"

# Kubernetes
helm = "latest"
kubeconform = "latest"
"ubi:telepresenceio/telepresence" = "latest"

# misc
yq = "latest"
"pipx:toml-cli" = "latest"
fd = "latest"
"ubi:google/addlicense" = "latest"

[settings]
experimental = true # for python.uv_venv_auto
python.uv_venv_auto = true
raw = true
node.gpg_verify = false # tends to randomly fail; sha is checked by lockfile

[hooks]
postinstall = "{{ mise_bin }} setup"

# TASKS

[task_config]
includes = [
    "./tasks.toml",
    "helm/tasks.toml",
    "apps/beeai-cli/tasks.toml",
    "apps/beeai-server/tasks.toml",
    "apps/beeai-ui/tasks.toml",
    "apps/beeai-web/tasks.toml",
    "docs/tasks.toml",
]

## grouped tasks

[tasks."setup"]
depends = ["*:setup"]

[tasks."check"]
depends = ["*:check"]

[tasks."fix"]
depends = ["*:fix"]

[tasks."test"]
depends = ["*:test"]

## git hooks

[tasks."git-hooks:pre-commit"]
hide = true
depends = ["check"]

## common tasks

### setup

[tasks."common:setup"]
depends = ["common:setup:*"]

[tasks."common:setup:mise-local-toml"]
hide = true
dir = "{{config_root}}"
run = "test -f mise.local.toml || cp mise.local.toml-example mise.local.toml"
sources = ["mise.local.toml-example"]
outputs = { auto = true }

[tasks."common:setup:git-hooks"]
hide = true
dir = "{{config_root}}"
run = "test ! -d .git || (printf '#!/bin/sh\n{{ mise_bin }} run git-hooks:pre-commit' >.git/hooks/pre-commit && chmod +x .git/hooks/pre-commit)"
sources = [".git/hooks/pre-commit"]
outputs = { auto = true }

[tasks."common:setup:pnpm"]
hide = true
dir = "{{config_root}}"
run = "pnpm install"
sources = ["pnpm-lock.yaml", "pnpm-workspace.yaml", "apps/*/package.json", "docs/package.json", "agents/*/*/package.json"]
outputs = { auto = true }

### check

[tasks."common:check"]
depends = ["common:check:*"]

[tasks."common:check:license"]
dir = "{{config_root}}"
run = "addlicense -check -l apache -s=only -c '© BeeAI a Series of LF Projects, LLC' $(fd '\\.(py|[jt]sx?|html|s?css)$')"

[tasks."common:check:version"]
dir = "{{config_root}}"
run = '''
#!/bin/bash
set -e -o pipefail

        helm_version=$(yq -r '.version'         helm/Chart.yaml)
    helm_app_version=$(yq -r '.appVersion'      helm/Chart.yaml)
   beeai_cli_version=$(yq -r '.project.version' apps/beeai-cli/pyproject.toml)
beeai_server_version=$(yq -r '.project.version' apps/beeai-server/pyproject.toml)
    beeai_ui_version=$(yq -r '.version'         apps/beeai-ui/package.json)
   beeai_web_version=$(yq -r '.version'         apps/beeai-web/package.json)

if [ "$helm_version" != "$helm_app_version" ] || \
   [ "$helm_version" != "$beeai_cli_version" ] || \
   [ "$helm_version" != "$beeai_server_version" ] || \
   [ "$helm_version" != "$beeai_ui_version" ] || \
   [ "$helm_version" != "$beeai_web_version" ]; then
  echo "Version mismatch:"
  echo "  helm.version:     $helm_version"
  echo "  helm.appVersion:  $helm_app_version"
  echo "  beeai-cli:        $beeai_cli_version"
  echo "  beeai-server:     $beeai_server_version"
  echo "  beeai-ui:         $beeai_ui_version"
  echo "  beeai-web:        $beeai_web_version"
  exit 1
fi

if ! [[ "$helm_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
  echo "ERROR: Invalid version format. Use #.#.# or #.#.#-rc#"
  exit 1
fi

if [[ "$GITHUB_REF" == refs/tags/v* && "$GITHUB_REF" != "refs/tags/v$helm_version" ]]; then
  echo "GITHUB_REF '$GITHUB_REF' does not match expected 'refs/tags/v$helm_version'"
  exit 1
fi
'''

### fix

[tasks."common:fix"]
depends = ["common:fix:*"]

[tasks."common:fix:license"]
dir = "{{config_root}}"
run = "addlicense -l apache -s=only -c '© BeeAI a Series of LF Projects, LLC' $(fd '\\.(py|[jt]sx?|html|s?css)$')"

### test

[tasks."common:test"]
run = "true" # Empty tests in case there are no tests

### release

[tasks."release"]
dir = "{{config_root}}"
run = '''
#!/bin/bash
set -eu -o pipefail

# Ensure on main branch
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$current_branch" != "main" ]]; then
  echo "ERROR: You must be on the 'main' branch (current: $current_branch)"
  exit 1
fi

# Ensure working directory is clean
if [[ -n "$(git status --porcelain)" ]]; then
  echo "ERROR: Working directory not clean"
  git status
  exit 1
fi

# Prompt for version bump with validation
current_version=$(yq -r '.version' helm/Chart.yaml)
while true; do
  read -p "Bump from ${current_version} to: " new_version
  if [[ "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
    break
  else
    echo "ERROR: Invalid version format. Use #.#.# or #.#.#-rc#"
    exit 1
  fi
done

# Update all version fields
yq -i ".version = \"$new_version\"" helm/Chart.yaml
yq -i ".appVersion = \"$new_version\"" helm/Chart.yaml
(cd apps/beeai-cli && toml set 'project.version' "$new_version" --toml-path pyproject.toml && uv lock)
(cd apps/beeai-server && toml set 'project.version' "$new_version" --toml-path pyproject.toml && uv lock)
yq -i ".version = \"$new_version\"" apps/beeai-ui/package.json
yq -i ".version = \"$new_version\"" apps/beeai-web/package.json

# Confirm commit and push (default: yes)
read -p "Commit and push? [Y/n] " confirm
if [[ "${confirm:-y}" =~ ^[Yy]$ ]]; then
  (
    set -eux -o pipefail
    git add helm/Chart.yaml apps/beeai-{cli,server}/{uv.lock,pyproject.toml} apps/beeai-{ui,web}/package.json
    git commit -m "release: v$new_version"
    git tag "v$new_version"
    git push --atomic origin main "v$new_version"
  )
fi
'''
