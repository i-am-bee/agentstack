openapi: 3.1.1
info:
  title: ACP - Agent Communication Protocol
  description: >-
    TBD
  contact:
    name: BeeAI
    url: https://beeai.dev
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about BeeAI
  url: https://docs.beeai.dev
servers:
  - url: http://localhost:8333/api/v0
tags:
  - name: agent
    description: Operations about agent
paths:
  /agents:
    get:
      tags:
        - agent
      summary: List agents
      description: Multiple filter values can be provided
      operationId: listAgents
      parameters:
        - name: limit
          in: query
          description: Maximum number to return
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: Offset to start from
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /agents/{agentName}:
    get:
      tags:
        - agent
      summary: Get agent by name.
      description: Returns a single pet.
      operationId: getAgentByName
      parameters:
        - name: agentName
          in: path
          description: Name of agent to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid Name supplied
        "404":
          description: Agent not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /runs:
    post:
      tags:
        - run
      summary: Run agent
      description: Run an agent
      operationId: run
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunCreateBody"
      responses:
        "200":
          description: Run created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/RunDelta"
        "202":
          description: Run created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        "404":
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /runs/{run_id}:
    get:
      tags:
        - run
      summary: Read run
      description: Read state of a run
      operationId: run
      responses:
        "200":
          description: Status successfully read
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        "404":
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - run
      summary: Resume run
      description: Resume interrupted run.
      operationId: run
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunResumeBody"
      responses:
        "200":
          description: Run resumed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/RunDelta"
        "202":
          description: Run resumed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        "404":
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /runs/{run_id}/cancel:
    post:
      tags:
        - run
      summary: Cancel run
      description: Cancel run
      operationId: run
      responses:
        "200":
          description: Run cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    AgentId:
      type: string
      description: Identifier if an agent
    RunId:
      type: string
      description: Identifier of a run
    RunStatus:
      type: string
      enum: [created, in-progress, interrupted, cancelled, completed, failed]
      description: Status of the run
    RunMode:
      type: string
      enum: [sync, async, stream]
      default: sync
      description: Mode of the request
    RunInput:
      type: object
    RunOutput:
      type: object
    RunCreateBody:
      type: object
      required:
        - agent_id
        - input
      properties:
        agent_id:
          $ref: "#/components/schemas/AgentId"
        input:
          $ref: "#/components/schemas/RunInput"
        mode:
          $ref: "#/components/schemas/RunMode"
    RunResumeBody:
      type: object
      required:
        - run_id
        - interrupt
      properties:
        run_id:
          $ref: "#/components/schemas/RunId"
        interrupt:
          oneOf:
          - type: object
            description: Interrupt expected to resume the run, only available when status is **interrupted**
            properties:
              type: 
                type: string
                const: output
              input:
                $ref: "#/components/schemas/RunInput"
        mode:
          $ref: "#/components/schemas/RunMode"
    Run:
      type: object
      properties:
        agent_id:
          $ref: "#/components/schemas/AgentId"
        run_id:
          $ref: "#/components/schemas/RunId"
        status:
          $ref: "#/components/schemas/RunStatus"
        interrupt:
          oneOf:
          - type: object
            description: Interrupt expected to resume the run, only available when status is **interrupted**
            properties:
              type: 
                type: string
                const: output
              output:
                $ref: "#/components/schemas/RunOutput"
            nullable: true
        output:
          $ref: "#/components/schemas/RunOutput"
          description: Output of the run, only available once run has completed
          nullable: true
    RunDelta:
      type: object
      properties:
        run_id:
          $ref: "#/components/schemas/RunId"
        agent_id:
          $ref: "#/components/schemas/AgentId"
        status:
          $ref: "#/components/schemas/RunStatus"
        delta:
          type: object
          description: Delta of the output
    Agent:
      required:
        - name
        - description
      type: object
      properties:
        name:
          type: string
          description: Name of the agent
          examples:
            - gpt-researcher
        description:
          type: string
          examples:
            - Conducts in-depth local and web research
        capabilities:
          $ref: "#/components/schemas/Capabilities"
        schemas:
          $ref: "#/components/schemas/Schemas"
        metadata:
          $ref: "#/components/schemas/Metadata"
        status:
          $ref: "#/components/schemas/Status"
    Capabilities:
      type: object
      required:
        - threads
        - interrupts
        - streaming
      properties:
        threads:
          type: boolean
          default: false
        interrupts:
          type: boolean
          default: false
        streaming:
          type: boolean
          default: false
    Schemas:
      type: object
      properties:
        input:
          $ref: "#/components/schemas/GeneralSchema"
        output:
          $ref: "#/components/schemas/GeneralSchema"
        interrupts:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Unique name of the interrupt
              request:
                $ref: "#/components/schemas/GeneralSchema"
              response:
                $ref: "#/components/schemas/GeneralSchema"
    Status:
      type: object
      description: Runtime related information
    Tag:
      anyOf:
        - type: string
        - enum:
            - Chat
            - RAG
            - Canvas
            - Code
            - Researcher
    Metadata:
      type: object
      properties:
        documentation:
          type: string
          description: Full agent documentation in markdown
        license:
          type: string
          description: >-
            SPDX license ID: https://spdx.org/licenses/
        language:
          type: string
          description: >-
            Programming language, supported values: https://docs.github.com/en/get-started/learning-about-github/github-language-support
        framework:
          type: string
          description: For example BeeAI, crewAI, Autogen, AG2
          examples:
            - BeeAI
            - AG2
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        author:
          $ref: "#/components/schemas/Person"
        contributors:
          type: array
          items:
            $ref: "#/components/schemas/Person"
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    GeneralSchema:
      oneOf:
        - $ref: "#/components/schemas/JsonSchema"
        - enum:
            - chat
            - text
    JsonSchema:
      type: object
    Link:
      type: object
      properties:
        type:
          enum:
            - source-code
            - docker-image
            - homepage
            - documentation
        url:
          type: string
          format: uri
    Timestamp:
      type: string
      format: date-time
      description: >-
        Timestamp in RFC3339 format: https://www.rfc-editor.org/rfc/rfc3339.html
    Person:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        url:
          type: string
          format: uri
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
