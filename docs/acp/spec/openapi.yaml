openapi: 3.1.1
info:
  title: ACP - Agent Communication Protocol
  description: >-
    The Agent Communication Protocol (ACP) provides a standardized RESTful API to manage and execute AI agents. It supports synchronous, asynchronous, and streamed interactions as well as stateless and stateful agents.
  contact:
    name: BeeAI
    url: https://beeai.dev
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Comprehensive documentation for ACP
  url: https://docs.beeai.dev
servers:
  - url: http://localhost:8333/api/v0
tags:
  - name: agent
    description: Operations related to managing agent definitions and metadata.
  - name: run
    description: Operations for creating, managing, and controlling agent runs and their lifecycles.
paths:
  /agents:
    get:
      tags:
        - agent
      description: Returns a list of agents.
      operationId: listAgents
      parameters:
        - name: limit
          in: query
          description: Maximum number to return
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: Offset to start from
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /agents/{name}:
    get:
      tags:
        - agent
      description: Get Agent
      operationId: getAgent
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid Name supplied
        "404":
          description: Agent not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /runs:
    post:
      tags:
        - run
      description: Run an agent
      operationId: createRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunCreateBody"
      responses:
        "200":
          description: Run created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/RunStep"
        "202":
          description: Run created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        "404":
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /runs/{run_id}:
    get:
      tags:
        - run
      description: Read state of a run
      operationId: getRun
      responses:
        "200":
          description: Status successfully read
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        "404":
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - run
      description: Resume awaiting run.
      operationId: resumeRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunResumeBody"
      responses:
        "200":
          description: Run resumed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/RunStep"
        "202":
          description: Run resumed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        "404":
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /runs/{run_id}/cancel:
    post:
      tags:
        - run
      description: Cancel run
      operationId: cancelRun
      responses:
        "202":
          description: Run cancelling
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "400":
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    SessionId:
      type: string
      description: Identifier of a session
    RunId:
      type: string
      description: Identifier of a run
    RunStatus:
      type: string
      enum:
        [
          created,
          in-progress,
          awaiting,
          cancelling,
          cancelled,
          completed,
          failed,
        ]
      description: Status of the run
    RunMode:
      type: string
      enum: [sync, async, stream]
      default: sync
      description: Mode of the request
    Message:
      type: array
      items:
        oneOf:
          - type: object
            required:
              - type
              - content
            properties:
              type:
                type: string
                const: text
              content:
                type: string
          - type: object
            required:
              - type
              - contentUrl
            properties:
              type:
                type: string
                const: image
              contentUrl:
                type: string
          - type: object
            required:
              - type
              - contentUrl
              - name
            properties:
              type:
                type: string
                const: artifact
              contentUrl:
                type: string
              name:
                type: string
    RunInput:
      $ref: "#/components/schemas/Message"
    RunOutput:
      $ref: "#/components/schemas/Message"
    RunCreateBody:
      type: object
      required:
        - agent_name
        - input
      properties:
        agent_name:
          $ref: "#/components/schemas/AgentName"
        session_id:
          $ref: "#/components/schemas/SessionId"
        input:
          $ref: "#/components/schemas/RunInput"
        mode:
          $ref: "#/components/schemas/RunMode"
    RunResumeBody:
      type: object
      required:
        - run_id
        - interrupt
      properties:
        run_id:
          $ref: "#/components/schemas/RunId"
        await:
          type: object
        mode:
          $ref: "#/components/schemas/RunMode"
    Run:
      type: object
      properties:
        agent_name:
          $ref: "#/components/schemas/AgentName"
        session_id:
          $ref: "#/components/schemas/SessionId"
        run_id:
          $ref: "#/components/schemas/RunId"
        status:
          $ref: "#/components/schemas/RunStatus"
        await:
          type: object
          description: Description of the awaited payload to resume the run, only available when status is **awaiting**
          nullable: true
        output:
          $ref: "#/components/schemas/RunOutput"
          description: Output of the run, only available once run has completed
          nullable: true
    RunStep:
      type: object
      properties:
        agent_name:
          $ref: "#/components/schemas/AgentName"
        session_id:
          $ref: "#/components/schemas/SessionId"
        run_id:
          $ref: "#/components/schemas/RunId"
        status:
          $ref: "#/components/schemas/RunStatus"
        step:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  const: output
                output:
                  $ref: "#/components/schemas/RunOutput"
    AgentName:
      type: string
      description: Name of the agent
      examples:
        - chat
    Agent:
      required:
        - name
        - description
        - interfaces
      type: object
      properties:
        name:
          $ref: "#/components/schemas/AgentName"
        description:
          type: string
          description: Short description of the agent. This field might be consumed and interpreted by large language models (LLMs).
          examples:
            - Conversational agent with memory, supporting real-time search, Wikipedia lookups, and weather updates through integrated tools
        interfaces:
          $ref: "#/components/schemas/Interfaces"
        metadata:
          $ref: "#/components/schemas/Metadata"
        status:
          $ref: "#/components/schemas/Status"
    Interfaces:
      type: object
      description: Description of agent interfaces
      properties:
        input:
          $ref: "#/components/schemas/GeneralSchema"
          examples:
            - chat
        output:
          $ref: "#/components/schemas/GeneralSchema"
          examples:
            - chat
        awaits:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Unique name of the await
              request:
                $ref: "#/components/schemas/GeneralSchema"
              response:
                $ref: "#/components/schemas/GeneralSchema"
    Status:
      type: object
      description: Runtime metrics and statistics provided by the platform.
      properties:
        avgRunTokens:
          type: number
          format: integer
        avgRunTimeSeconds:
          type: number
          format: float
        successRate:
          type: number
          minimum: 0
          maximum: 100
    Tag:
      anyOf:
        - type: string
        - enum:
            - Chat
            - RAG
            - Canvas
            - Code
            - Researcher
      examples:
        - Chat
    Metadata:
      type: object
      description: Optional data to support agent discovery and cataloguing.
      properties:
        documentation:
          type: string
          description: Full agent documentation in markdown.
          examples:
            - "The agent is a conversational system designed to process user messages, maintain context, and generate..."
        license:
          type: string
          description: >-
            SPDX license ID: https://spdx.org/licenses/
          examples:
            - Apache-2.0
        programmingLanguage:
          type: string
          description: >-
            Programming language, supported values: https://docs.github.com/en/get-started/learning-about-github/github-language-support
          examples:
            - Python
        naturalLanguages:
          type: array
          description: >
            List of human-readable languages supported by the agent for conversational interactions or content generation. Use ISO 639-1 codes.
          items:
            type: string
            examples:
              - en
              - fr
        framework:
          type: string
          description: For example BeeAI, crewAI, Autogen, AG2
          examples:
            - BeeAI
            - AG2
        useCases:
          type: array
          description: >
            A list of short plain-text strings describing use cases supported by the agent. This field might be consumed and interpreted by large language models (LLMs).
          items:
            type: string
            examples:
              - Conversational AI – Handles multi-turn conversations with memory.
              - Tool Integration – Supports real-time search, Wikipedia lookups, and weather updates.
        # TBD
        examples:
          type: array
          items:
            $ref: "#/components/schemas/Example"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        author:
          $ref: "#/components/schemas/Person"
        contributors:
          type: array
          items:
            $ref: "#/components/schemas/Person"
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/AgentDependency"
        recommendedModels:
          type: array
          items:
            type: string
            description: Model name ([ollama](https://github.com/ollama/ollama/blob/main/docs/api.md#model-names), [OpenAI](https://platform.openai.com/docs/models))
            examples:
              - llama3.3:70b-instruct-fp16
              - llama3.3
    GeneralSchema:
      oneOf:
        - $ref: "#/components/schemas/JsonSchema"
        - enum:
            - chat
            - text
          description: |
            Predefined schema types:
            - `chat`: Conversational input/output structured in a standard chat message format.
            - `text`: Simple plain text input/output without additional metadata.
    JsonSchema:
      type: object
    Link:
      type: object
      properties:
        type:
          enum:
            - source-code
            - container-image
            - homepage
            - documentation
        url:
          type: string
          format: uri
          examples:
            - https://github.com/i-am-bee/beeai.git
    Timestamp:
      type: string
      format: date-time
      description: >-
        Timestamp in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339.html) format (ISO8601-compatible).
    Person:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          examples:
            - John Smith
        email:
          type: string
          format: email
        url:
          type: string
          format: uri
          examples:
            - https://example.com
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    AgentDependency:
      type: object
      description: >
        **Experimental:** Represents a dependency required by the agent, specifying external resources or capabilities it relies upon, such as other agents, tools, or AI models.
      properties:
        type:
          enum:
            - agent
            - tool
            - model
          description: >
            Type of dependency:
            - `agent`: Another agent instance required to fulfill certain functionalities.
            - `tool`: External tool or utility needed by the agent.
            - `model`: Specific AI model that the agent depends on.
          examples:
            - tool
        name:
          type: string
          description: >
            Identifier or name of the dependency, such as an agent name, tool identifier, or model name.
          examples:
            - weather
