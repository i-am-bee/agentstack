manifestVersion: 1
name: chat
description: The agent is an AI-powered conversational system with memory, supporting real-time search, Wikipedia lookups, and weather updates through integrated tools.

framework: BeeAI
license: Apache 2.0
languages: 
  - TypeScript
githubUrl: https://github.com/i-am-bee/beeai/blob/main/agents/official/beeai-framework/src/chat
avgRunTimeSeconds: 3
avgRunTokens: 89
examples: 
  cli:
    - command: beeai run chat "What is the capital of France?"
      name: No tools
      description: Run agent with no tools.
    - command: 'beeai run chat {"messages": [{ "role": "user", "content": "What is the weather like in Paris?" }], "config": {"tools": ["weather"]}}'
      name: With tools
      description: Run agent with tools.
      output: The current temperature in Paris is 12°C with partly cloudy skies.
      processingSteps:
        - The agent receives the user message and detects the weather query
        - It invokes the OpenMeteoTool to fetch real-time weather data
        - The response is generated and sent back to the user
ui: 
  type: chat
  userGreeting: How can I help you?
fullDescription: |
  The agent is an AI-powered conversational system designed to process user messages, maintain context, and generate intelligent responses. Built on the **BeeAI framework**, it leverages memory and external tools to enhance interactions. It supports real-time web search, Wikipedia lookups, and weather updates, making it a versatile assistant for various applications.  

  ## How It Works  
  The agent processes incoming messages and maintains a conversation history using an **unconstrained memory module**. It utilizes a language model (\`CHAT_MODEL\`) to generate responses and can optionally integrate external tools for additional functionality.  

  It supports:  
  - **Web Search (DuckDuckGo)** – Retrieves real-time search results.  
  - **Wikipedia Search** – Fetches summaries from Wikipedia.  
  - **Weather Information (OpenMeteo)** – Provides real-time weather updates.  

  The agent also includes an **event-based streaming mechanism**, allowing it to send partial responses to clients as they are generated.  

  ## Input Parameters  
  The agent accepts structured input consisting of:  

  - **messages** (array) – A list of user and assistant messages to maintain conversation context.  
  - **config** (optional object) – Allows enabling external tools.  
    - **tools** (array of strings) – Specifies which tools to use (e.g., \`"search"\`, \`"wikipedia"\`, \`"weather"\`).  

  ## Output Structure  
  The agent returns an object with:  

  - **messages** (array) – A list of response messages from the assistant.  
    - **role** (string) – Always \`"assistant"\` for responses.  
    - **content** (string) – The generated response text.  

  ## Key Features  
  - **Conversational AI** – Handles multi-turn conversations with memory.  
  - **Tool Integration** – Supports real-time search, Wikipedia lookups, and weather updates.  
  - **Event-Based Streaming** – Can send partial updates to clients as responses are generated.  
  - **Customizable Configuration** – Users can enable or disable specific tools for enhanced responses.  

  ## Use Cases  
  - **Chatbots** – Can be used in AI-powered chat applications with memory.  
  - **Research Assistance** – Retrieves relevant information from web search and Wikipedia.  
  - **Weather Inquiries** – Provides real-time weather updates based on location.  
  - **AI Agents with Long-Term Memory** – Maintains context across conversations for improved interactions.  

env:
- name: LLM_MODEL
  required: false
  description: "Model to use from the specified OpenAI-compatible API."
- name: LLM_API_BASE
  required: false
  description: "Base URL for OpenAI-compatible API endpoint"
- name: LLM_API_KEY
  required: false
  description: "API key for OpenAI-compatible API endpoint"
