manifestVersion: 1
name: "agent-docs-creator"
description: The agent analyzes AI source code to generate structured, clear, and complete documentation in a consistent template, supporting multiple languages.

framework: BeeAI
license: Apache 2.0
languages: 
  - TypeScript
githubUrl: https://github.com/i-am-bee/beeai/tree/main/agents/official/agent-docs-creator
avgRunTimeSeconds: 19
avgRunTokens: 5409
examples: 
  cli:
    -  
      command: beeai run agent-docs-creator "function exampleAgent() { /* AI agent source code here */ }"
      name: Insert code directly
      description: Provide the entire source code on the command line
      output: "# Short Description\nThe agent generates structured documentation for AI agents by analyzing their source code...\n\n# Full Description\nThe agent is designed to create structured documentation for AI agents..."
      processingSteps:
        - Analyzes the provided source code to extract key features and functionality
        - Formats the extracted information into a structured documentation template
        - Simulates an interactive discussion to ensure the output adheres to the documentation standards
    - command: cat /path/to/agent/source.py | beeai run agent-docs-creator
      name: Pipe file content to the agent
      description: Use bash features to find and pipe source code to the agent stdin.
      output: "# Short Description\nThe agent generates structured documentation for AI agents by analyzing their source code...\n\n# Full Description\nThe agent is designed to create structured documentation for AI agents..."
      processingSteps:
        - Analyzes the provided source code to extract key features and functionality
        - Formats the extracted information into a structured documentation template
        - Simulates an interactive discussion to ensure the output adheres to the documentation standards
ui: 
  type: hands-off
  userGreeting: Provide source code of the AI agent you want to document
fullDescription: |
  The agent is designed to create structured documentation for AI agents by processing their source code. It aims to provide a comprehensive overview by extracting
  critical details and formatting them into a predefined documentation template. This ensures that the documentation is clear, complete, and consistent across different AI agents.

  ## How It Works
  The agent uses a chat model to analyze the input source code. It constructs a structured document consisting of a short description and a detailed markdown-formatted
  full description. The short description provides a high-level summary, while the full description includes sections like "How It Works," "Input Parameters," "Output Structure," "Key Features,"
  "Use Cases," and "Example Usage." The agent's output is generated by simulating a conversation between system and user messages to refine the output to meet the documentation standards.

  ## Input Parameters
  The agent requires the following input parameter:
  - **text** (string) – String that represents the source code of the AI agent to be documented.

  ## Output Structure
  The agent returns an object with the following structure:
  - **text** (string) – The structured documentation generated in markdown format, including both the short and full description sections.

  ## Key Features
  - **Automated Documentation Generation** – Transforms AI agent source code into structured documentation.
  - **Consistent Template** – Uses a predefined template to ensure uniformity across different documentations.
  - **Multi-Language Support** – Capable of processing AI agents written in various programming languages.
  - **Interactive Clarification** – Includes logic to request additional details if the source code lacks sufficient information.

  ## Use Cases
  - **AI Agent Cataloging** – Streamlines the creation of documentation for AI agents to be included in catalogs or repositories.
  - **Source Code Analysis** – Provides insights into the functionality and features of AI agents by examining their source code.
  - **Technical Documentation Enhancement** – Enhances the quality and clarity of technical documentation for AI solutions.

env:
- name: LLM_MODEL
  required: false
  description: "Model to use from the specified OpenAI-compatible API."
- name: LLM_API_BASE
  required: false
  description: "Base URL for OpenAI-compatible API endpoint"
- name: LLM_API_KEY
  required: false
  description: "API key for OpenAI-compatible API endpoint"
