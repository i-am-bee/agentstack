manifestVersion: 1
name: "aider"
description: An AI pair programmer that edits code in a local Git repository using natural language, executing commands and providing feedback.

framework: Custom
license: Apache 2.0
languages: 
  - Python
githubUrl: https://github.com/i-am-bee/beeai/tree/main/agents/community/aider-agent
avgRunTimeSeconds: 5.0
avgRunTokens: 5000
examples: 
  command: beeai run aider "Make a program that asks for a number and prints its factorial"
  processingSteps:
    - The agent is triggered with the natural language input
    - It executes the `aider` command in a temporary directory with specified options
    - Captures the standard output and error streams, updating the user with progress
    - Reads and returns the content of any generated or modified files
ui: 
  type: hands-off
  userGreeting: Define your programming task
fullDescription: |
  > ℹ️ NOTE
  > 
  > This agent works in stateless mode at the moment. While the CLI only shows the textual output, the created files are also available through the API.

  The agent is an advanced AI pair programming assistant designed to help developers edit and manage code in their local git repositories via natural language instructions. It leverages AI to assist programmers in writing, editing, debugging, and understanding code, enhancing productivity and simplifying complex coding tasks. The agent runs in a local environment and interacts directly with the user's codebase, providing actionable insights and modifications.

  ## How It Works
  The agent operates as a server-based application that listens for programming-related commands. Upon receiving a command in natural language, it executes the appropriate actions within a temporary directory, simulating changes and returning feedback to the user. The agent uses subprocess execution to run the `aider` command with various options, capturing both standard output and errors to provide detailed responses. It also reads files generated during the process to include their content in the output if applicable.

  ## Input Parameters
  The agent requires the following input parameters:
  - **input** (string) – The prompt containing natural language instructions for code editing or management.

  ## Output Structure
  The agent returns an `Output` object with the following fields:
  - **files** (dict) – A dictionary mapping file paths to their respective content, representing any new or modified files.
  - **text** (str) – A string containing the text output from the executed commands, including any error messages.

  ## Key Features
  - **Natural Language Processing** – Understands and executes code-related commands described in natural language.
  - **Local Environment Integration** – Operates directly within the user's local environment, simulating changes in a temporary workspace.
  - **Real-Time Feedback** – Provides continuous updates on the execution progress and returns detailed results.
  - **Error Handling** – Captures and reports errors encountered during execution, assisting with debugging.

  ## Use Cases
  - **Program Generation from Natural Language** – Converts user requests into fully functional programs.
  - **Code Editing and Refactoring** – Assists developers in modifying existing codebases without manual intervention.
  - **Debugging Support** – Provides insights and suggestions for resolving coding errors or inefficiencies.
  - **Collaborative Programming** – Simulates a pair programming experience, enhancing coding efficiency and learning.
  - **Bash/Shell Scripting Assistance** – Automates script writing, optimization, and debugging.

env:
  - name: LLM_MODEL
    required: false
    description: "Model to use from the specified OpenAI-compatible API."
  - name: LLM_API_BASE
    required: false
    description: "Base URL for OpenAI-compatible API endpoint"
  - name: LLM_API_KEY
    required: false
    description: "API key for OpenAI-compatible API endpoint"

  # Aider-specific configuration:
  - name: AIDER_REASONING_EFFORT
    required: false
    description: "Set the reasoning_effort API parameter for the model"
  - name: AIDER_VERIFY_SSL
    required: false
    description: "Verify the SSL cert when connecting to models (default: True)"
  - name: AIDER_ARCHITECT
    required: false
    description: "Use architect edit format for the main chat"
  - name: AIDER_WEAK_MODEL
    required: false
    description: "Specify the model to use for commit messages and chat history summarization (default depends on --model)"
  - name: AIDER_EDITOR_MODEL
    required: false
    description: "Specify the model to use for editor tasks (default depends on model)"
  - name: AIDER_EDITOR_EDIT_FORMAT
    required: false
    description: "Specify the edit format for the editor model (default: depends on editor model)"
  - name: AIDER_MAX_CHAT_HISTORY_TOKENS
    required: false
    description: "Soft limit on tokens for chat history, after which summarization begins. If unspecified, defaults to the model's max_chat_history_tokens"
  - name: AIDER_CACHE_PROMPTS
    required: false
    description: "Enable caching of prompts (default: False)"
  - name: AIDER_CACHE_KEEPALIVE_PINGS
    required: false
    description: "Number of times to ping at 5min intervals to keep prompt cache warm (default: 0)"
  - name: AIDER_MAP_TOKENS
    required: false
    description: "Suggested number of tokens to use for repo map, use 0 to disable"
  - name: AIDER_MAP_REFRESH
    required: false
    description: "Control how often the repo map is refreshed. Options: auto, always, files, manual (default: auto)"
  - name: AIDER_MAP_MULTIPLIER_NO_FILES
    required: false
    description: "Multiplier for map tokens when no files are specified (default: 2)"
