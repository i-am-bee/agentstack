apiVersion: apps/v1
kind: Deployment
metadata:
  name: beeai-platform
  labels:
    app: beeai-platform-server
    {{- include "beeai-platform.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: beeai-platform-server
      {{- include "beeai-platform.selectorLabels" . | nindent 6 }}
  strategy:
    type: {{ ternary "Recreate" "RollingUpdate" .Values.hostNetwork }}
  template:
    metadata:
      annotations:
        checksum/providers: {{ include (print $.Template.BasePath "/config/providers.yaml") . | sha256sum }}
        checksum/templates: {{ include (print $.Template.BasePath "/config/provider_templates.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/config/secret.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: beeai-platform-server
        {{- include "beeai-platform.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      {{- include "beeai-platform.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "beeai-platform.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.initContainers.createVectorDbExtension }}
        - name: create-pgvector-extension
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: "/app/"
          command: [ "create-vector-extension" ]
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: AUTH__DISABLE_AUTH
              value: "true"
            - name: LOGGING__LEVEL_SQLALCHEMY
              value: INFO
            - name: PERSISTENCE__ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: beeai-platform-secret
                  key: encryptionKey
            - name: PERSISTENCE__DB_URL
              valueFrom:
                secretKeyRef:
                  key: sqlConnectionSuperuser
                  name: {{ include "beeai.databaseSecretName" . }}
        {{- end }}
        - name: run-migrations
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: "/app/"
          command: [ "migrate" ]
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: AUTH__DISABLE_AUTH
              value: "true"
            - name: LOGGING__LEVEL_SQLALCHEMY
              value: INFO
            - name: PERSISTENCE__ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: beeai-platform-secret
                  key: encryptionKey
            - name: PERSISTENCE__DB_URL
              valueFrom:
                secretKeyRef:
                  key: sqlConnection
                  name: {{ include "beeai.databaseSecretName" . }}
        - name: create-buckets
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: "/app/"
          command: [ "create-buckets" ]
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: AUTH__DISABLE_AUTH
              value: "true"
            - name: PERSISTENCE__ENCRYPTION_KEY
              value: "dummy"
            # Object Storage Configuration
            - name: OBJECT_STORAGE__ENDPOINT_URL
              value: {{ include "beeai.s3.endpoint" . | quote }}
            - name: OBJECT_STORAGE__ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "beeai.s3.secretName" . }}
                  key: s3AccessKeyId
            - name: OBJECT_STORAGE__ACCESS_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "beeai.s3.secretName" . }}
                  key: s3AccessKeySecret
            - name: OBJECT_STORAGE__BUCKET_NAME
              value: {{ include "beeai.s3.bucket" . | quote }}
            - name: OBJECT_STORAGE__REGION
              value: {{ include "beeai.s3.region" . | quote }}
            - name: OBJECT_STORAGE__USE_SSL
              value: {{ ternary "true" "false" (eq (include "beeai.s3.protocol" .) "https") | quote}}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8333
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            {{/* see https://fastapi.tiangolo.com/deployment/https/?h=forwarded+allow+ips#proxy-forwarded-headers */}}
            - name: FORWARDED_ALLOW_IPS
              value: {{ .Values.forwardedAllowIps | quote }}
            - name: FEATURE_FLAGS__UI__USER_NAVIGATION
              value: {{ .Values.features.uiNavigation | quote }}
            - name: TEXT_EXTRACTION__ENABLED
              value: {{ .Values.docling.enabled | quote }}
            - name: AGENT_REGISTRY__SYNC_PERIOD_SEC
              value: "30"
            {{- include "beeai-platform.registryEnvVars" . | nindent 12 }}
            - name: FEATURES__PROVIDER_BUILDS
              value: {{ .Values.providerBuilds.enabled | quote }}
            {{- if .Values.providerBuilds.enabled }}
            - name: PROVIDER_BUILD__OCI_BUILD_REGISTRY_PREFIX
              value: {{ .Values.providerBuilds.buildRegistry.registryPrefix | quote }}
            - name: PROVIDER_BUILD__IMAGE_FORMAT
              value: {{ .Values.providerBuilds.buildRegistry.imageFormat | quote }}
            {{- end }}
            {{- range $provider := .Values.githubTokens }}
            - name: GITHUB_REGISTRY__{{ $provider.host | upper }}__TOKEN
              valueFrom:
                secretKeyRef:
                  name: beeai-platform-secret
                  key: GITHUB_REGISTRY__{{ $provider.host | upper }}__TOKEN
            {{- end }}
            - name: AGENT_REGISTRY__LOCATIONS__FILE
              value: file:///app/config/registry.yaml
            {{- range $name, $location := .Values.externalRegistries }}
            - name: AGENT_REGISTRY__LOCATIONS__{{ $name | upper }}
              value: {{ $location }}
            {{- end }}
            - name: PERSISTENCE__ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: beeai-platform-secret
                  key: encryptionKey
            - name: PERSISTENCE__DB_URL
              valueFrom:
                secretKeyRef:
                  key: sqlConnection
                  name: {{ include "beeai.databaseSecretName" . }}
            {{- if .Values.auth.enabled }}
            - name: AUTH__DISABLE_AUTH
              value: "false"
            - name: AUTH__JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: jwtSecretKey
                  name: beeai-platform-secret
            {{- if .Values.auth.basic.enabled}}
            - name: AUTH__BASIC__ENABLED
              value: "true"
            - name: AUTH__BASIC__ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: adminPassword
                  name: beeai-platform-secret
            {{- end }}
            {{- if .Values.auth.oidc.enabled}}
            - name: AUTH__OIDC__ENABLED
              value: "true"
            - name: AUTH__OIDC__DEFAULT_NEW_USER_ROLE
              value: {{ .Values.auth.oidc.default_new_user_role }}
            {{- if and .Values.auth.oidc.admin_emails (gt (len .Values.auth.oidc.admin_emails) 0) }}
            - name: AUTH__OIDC__ADMIN_EMAILS
              value: {{ .Values.auth.oidc.admin_emails | toJson | quote }}
            {{- end }}
            - name: AUTH__OIDC__PROVIDERS
              valueFrom:
                secretKeyRef:
                  key: providers.json
                  name: beeai-oidc-providers
            {{- end }}
            {{- else }}
            - name: AUTH__DISABLE_AUTH
              value: "true"
            {{- end }}
            {{- if .Values.features.selfRegistration }}
            - name: PROVIDER__AUTO_REMOVE_ENABLED
              value: "true"
            {{- end }}
            - name: FEATURES__GENERATE_CONVERSATION_TITLE
              value: {{ .Values.features.generateConversationTitle | quote }}
            - name: PROVIDER__MANIFEST_TEMPLATE_DIR
              value: /app/templates
            # Object Storage Configuration
            - name: OBJECT_STORAGE__ENDPOINT_URL
              value: {{ include "beeai.s3.endpoint" . | quote }}
            - name: OBJECT_STORAGE__ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "beeai.s3.secretName" . }}
                  key: s3AccessKeyId
            - name: OBJECT_STORAGE__ACCESS_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "beeai.s3.secretName" . }}
                  key: s3AccessKeySecret
            - name: OBJECT_STORAGE__BUCKET_NAME
              value: {{ include "beeai.s3.bucket" . | quote }}
            - name: OBJECT_STORAGE__REGION
              value: {{ include "beeai.s3.region" . | quote }}
            - name: OBJECT_STORAGE__USE_SSL
              value: {{ ternary "true" "false" (eq (include "beeai.s3.protocol" .) "https") | quote}}
          volumeMounts:
            - name: beeai-platform-providers
              mountPath: /app/config
              readOnly: true
            - name: beeai-platform-manifest-templates
              mountPath: /app/templates
              readOnly: true
            {{- with .Values.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: beeai-platform-providers
          configMap:
            name: beeai-platform-providers-cm
        - name: beeai-platform-manifest-templates
          configMap:
            name: beeai-platform-manifest-templates-cm
        {{- with .Values.volumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
