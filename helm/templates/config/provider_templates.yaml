apiVersion: v1
kind: ConfigMap
metadata:
  name: beeai-platform-manifest-templates-cm
data:
  deployment.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: "{{`{{ provider_deployment_name }}`}}"
      labels:
        app: "{{`{{ provider_app_label }}`}}"
        managedBy: beeai-platform
      annotations:
        {{- with .Values.agent.deploymentAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      strategy:
        type: {{ .Values.agent.deploymentStrategy }}
      replicas: 1
      selector:
        matchLabels:
          app: "{{`{{ provider_app_label }}`}}"
      template:
        metadata:
          labels:
            app: "{{`{{ provider_app_label }}`}}"
          {{- with .Values.agent.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        spec:
          {{- include "beeai-platform.imagePullSecrets" . | nindent 10 }}
          containers:
            - name: agent-container
              image: "{{`{{ image }}`}}"
              {{- if .Values.agent.imagePullPolicy }}
              imagePullPolicy: {{ .Values.agent.imagePullPolicy }}
              {{- end }}
              ports:
                - containerPort: 8000
              env:
                - name: HOME
                  value: /tmp
              envFrom:
                - secretRef:
                    name: "{{`{{ provider_secret_name }}`}}"
              {{- with .Values.agent.livenessProbe }}
              livenessProbe:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              {{- with .Values.agent.startupProbe }}
              startupProbe:
                {{- toYaml . | nindent 16 }}
              {{- end }}
  service.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{`{{ provider_service_name }}`}}"
      labels:
        app: "{{`{{ provider_app_label }}`}}"
    spec:
      type: {{ .Values.agent.service.type }}
      selector:
        app: "{{`{{ provider_app_label }}`}}"
      ports:
        - port: {{ .Values.agent.service.port }}
          targetPort: 8000
          protocol: TCP
          name: http

  secret.yaml: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: "{{`{{ provider_secret_name }}`}}"
      labels:
        app: "{{`{{ provider_app_label }}`}}"
    type: Opaque
    data: {{`{{ secret_data }}`}}

  {{- if .Values.providerBuilds.enabled }}
  build-provider-secret.yaml: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: "{{`{{ git_token_secret_name }}`}}"
      labels:
        app: "{{`{{ provider_build_label }}`}}"
    type: Opaque
    data: {{`{{ secret_data }}`}}
  build-provider-job.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: "{{`{{ provider_build_name }}`}}"
      labels:
        app: "{{`{{ provider_build_label }}`}}"
        managedBy: beeai-platform
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: {{`{{ job_timeout_seconds }}`}}
      ttlSecondsAfterFinished: 60
      template:
        spec:
          {{- if .Values.providerBuilds.externalClusterExecutor.serviceAccountName }}
          serviceAccountName: {{ .Values.providerBuilds.externalClusterExecutor.serviceAccountName }}
          {{- end }}
          imagePullSecrets:
            - name: {{.Values.providerBuilds.buildRegistry.secretName | quote}}
          securityContext:
            fsGroup: 1000
          restartPolicy: Never
          initContainers:
            - name: git-clone
              image: ghcr.io/i-am-bee/alpine/git:v2.49.1
              command: [ "/bin/sh" ]
              env:
                - name: GIT_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: {{`{{ git_token_secret_name }}`}}
                      key: GIT_TOKEN
                      optional: true
              args:
                - -c
                - |
                  echo "Cloning repository..."
                  # Check if GitHub token is available for this host
                  if [ -n "$GIT_TOKEN" ]; then
                    echo "Using authenticated clone for {{`{{ git_host }}`}}"
                  else
                    echo "Using unauthenticated clone for {{`{{ git_host }}`}}"
                  fi
                  git clone --depth 1 \
                    --revision {{`{{ git_ref }}`}} \
                    "https://$GIT_TOKEN@{{`{{ git_host }}`}}/{{`{{ git_org }}`}}/{{`{{ git_repo }}`}}.git" \
                    /tmp/repo
                  mv "/tmp/repo/{{`{{ git_path }}`}}"/* /workspace/ 2>/dev/null || true
                  mv "/tmp/repo/{{`{{ git_path }}`}}"/.[^.]* /workspace/ 2>/dev/null || true
                  echo "Repository cloned successfully"
                  ls -la /workspace
              volumeMounts:
                - name: workspace
                  mountPath: /workspace
              securityContext:
                capabilities:
                  drop:
                    - ALL
                runAsUser: 1000
                runAsGroup: 1000
            # Build image with BuildKit
            {{- if eq .Values.providerBuilds.buildBackend "buildkit" }}
            - name: buildkit
              image: ghcr.io/i-am-bee/moby/buildkit:v0.24.0-rootless
              env:
                - name: DOCKER_CONFIG
                  value: /docker
                - name: BUILDKITD_FLAGS
                  value: --oci-worker-no-process-sandbox
              command:
                - buildctl-daemonless.sh
              args:
                - build
                - --frontend
                - dockerfile.v0
                - --local
                - "dockerfile=/workspace/{{`{{ dockerfile_path }}`}}"
                - --local
                - context=/workspace
                - --opt
                - platform=linux/amd64,linux/arm64
                - --output
                - type=image,name={{`{{destination}}`}},push=true{{- if .Values.providerBuilds.buildRegistry.insecure }},registry.insecure=true{{- end }}
                - --export-cache
                - type=inline
                - --import-cache
                - type=registry,ref={{`{{destination}}`}}{{- if .Values.providerBuilds.buildRegistry.insecure }},registry.insecure=true{{- end }}
              securityContext:
                # Needs Kubernetes >= 1.19
                seccompProfile:
                  type: Unconfined
                # Needs Kubernetes >= 1.30
                appArmorProfile:
                  type: Unconfined
                # To change UID/GID, you need to rebuild the image
                runAsUser: 1000
                runAsGroup: 1000
              volumeMounts:
                - name: workspace
                  mountPath: /workspace
                # Dockerfile has `VOLUME /home/user/.local/share/buildkit` by default too,
                # but the default VOLUME does not work with rootless on Google's Container-Optimized OS
                # as it is mounted with `nosuid,nodev`.
                # https://github.com/moby/buildkit/issues/879#issuecomment-1240347038
                - mountPath: /home/user/.local/share/buildkit
                  name: buildkitd
                - name: docker-config
                  mountPath: /docker/config.json
                  subPath: .dockerconfigjson
                  readOnly: true
            {{- else if eq .Values.providerBuilds.buildBackend "kaniko" }}
            # Build image with Kaniko (no securityContext required)
            - name: kaniko-build
              image: ghcr.io/kaniko-build/dist/chainguard-dev-kaniko/executor:v1.25.2-slim
              args:
                - --context=/workspace
                - "--dockerfile=/workspace/{{`{{ dockerfile_path }}`}}"
                - --no-push
                - --tar-path=/tmp/image.tar
              volumeMounts:
                - name: workspace
                  mountPath: /workspace
                - name: image-tar
                  mountPath: /tmp
              securityContext:
                runAsUser: 0
                {{- if .Values.providerBuilds.kaniko.useSecurityContextCapabilities }}
                # Capabilities don't work as expected in k3s. Instead of complex security configuration, use a simple toggle
                # this can be refined later
                capabilities:
                  drop:
                    - ALL
                  add:
                    - CAP_CHOWN
                    - CAP_SETGID
                    - CAP_SETUID
                    - CAP_FOWNER
                    - CAP_DAC_OVERRIDE
                {{- end }}
            # Main container: Step 3 Push the intermediary image
            - name: crane-push
              image: ghcr.io/i-am-bee/alpine/crane:0.20.6
              env:
                - name: DOCKER_CONFIG
                  value: /tmp/.docker
              args:
                - push
                - /tmp/image.tar
                - {{`{{ destination }}`}}
                {{- if .Values.providerBuilds.buildRegistry.insecure }}
                - --insecure
                {{- end }}
              volumeMounts:
                - name: image-tar
                  mountPath: /tmp
                - name: docker-config
                  mountPath: /tmp/.docker/config.json
                  subPath: .dockerconfigjson
                  readOnly: true
              securityContext:
                capabilities:
                  drop:
                    - ALL
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "200m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
            {{- end }}
            - name: run-agent
              image: "{{`{{ destination }}`}}"
              restartPolicy: Always # This makes it a daemon sidecar container
              env:
                - name: PORT
                  value: "8000"
                - name: HOST
                  value: "0.0.0.0"
              securityContext:
                capabilities:
                  drop:
                    - ALL
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: "512Mi"
                  cpu: "500m"
                limits:
                  memory: "1Gi"
                  cpu: "1"
          containers:
            # Main container: Step 3 - Mutate and push final image
            - name: mutate
              image: ghcr.io/i-am-bee/alpine/crane:0.20.6
              env:
                - name: DOCKER_CONFIG
                  value: /tmp/.docker
              command:
                - /bin/sh
                - -c
                - |
                  # Extract agent manifest
                  for i in $(seq 1 30); do
                    if nc -z 127.0.0.1 8000; then
                      break
                    fi
                    echo "Waiting for server to start... (attempt $i/10)"
                    sleep 1
                  done

                  AGENT_CARD_CONTENT=$(wget -O - http://127.0.0.1:8000/.well-known/agent-card.json)
                  if [ $? -eq 0 ] && [ -n "$AGENT_CARD_CONTENT" ]; then
                    echo "Successfully extracted agent-card.json"
                    echo "Content preview:"
                    echo "$AGENT_CARD_CONTENT" | head -n 10
                  else
                    echo "Failed to extract agent-card.json"
                    exit 1
                  fi

                  echo "Starting image mutation..."
                  echo "Extraction complete!"

                  LABEL_CONTENT=$(echo -n "$AGENT_CARD_CONTENT" | base64 -w 0)
                  echo "Label content size: $(echo -n $LABEL_CONTENT | wc -c) bytes"
                  crane mutate {{- if .Values.providerBuilds.buildRegistry.insecure }} --insecure{{- end }} {{`{{ destination }}`}} \
                    --label "beeai.dev.agent.json=${LABEL_CONTENT}"

              volumeMounts:
                - name: docker-config
                  mountPath: /tmp/.docker/config.json
                  subPath: .dockerconfigjson
                  readOnly: true
              securityContext:
                capabilities:
                  drop:
                    - ALL
                runAsUser: 1000
                runAsGroup: 1000
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "200m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"

          volumes:
            - name: workspace
              emptyDir: { }
            {{- if eq .Values.providerBuilds.buildBackend "buildkit" }}
            - name: buildkitd
              emptyDir: { }
            {{- else if eq .Values.providerBuilds.buildBackend "kaniko" }}
            - name: image-tar
              emptyDir: { }
            {{- end }}
            - name: docker-config
              secret:
                secretName: {{ .Values.providerBuilds.buildRegistry.secretName }}
    {{- end }}

