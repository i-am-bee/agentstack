## grouped tasks

["setup"]
depends = ["*:setup"]

["check"]
depends = ["*:check"]

["fix"]
depends = ["*:fix"]

["test"]
depends = ["*:test"]

## git hooks

["git-hooks:pre-commit"]
hide = true
depends = ["check"]

## common tasks

### setup

["common:setup"]
depends = ["common:setup:*"]

["common:setup:mise-local-toml"]
hide = true
dir = "{{config_root}}"
run = "test -f mise.local.toml || cp mise.local.toml-example mise.local.toml"
sources = ["mise.local.toml-example"]
outputs = { auto = true }

["common:setup:git-hooks"]
hide = true
dir = "{{config_root}}"
run = "test ! -d .git || (printf '#!/bin/sh\n{{ mise_bin }} run git-hooks:pre-commit' >.git/hooks/pre-commit && chmod +x .git/hooks/pre-commit)"
sources = [".git/hooks/pre-commit"]
outputs = { auto = true }

["common:setup:pnpm"]
hide = true
dir = "{{config_root}}"
run = "pnpm install"
sources = ["pnpm-lock.yaml", "pnpm-workspace.yaml", "apps/*/package.json", "docs/package.json", "agents/*/*/package.json"]
outputs = { auto = true }

### check

["common:check"]
depends = ["common:check:*"]

["common:check:license"]
dir = "{{config_root}}"
run = "addlicense -check -l apache -s=only -c '© BeeAI a Series of LF Projects, LLC' $(fd '\\.(py|[jt]sx?|html|s?css)$')"

["common:check:version"]
dir = "{{config_root}}"
run = '''
#!/bin/bash
set -e -o pipefail

        helm_version=$(yq -r '.version'         helm/Chart.yaml)
    helm_app_version=$(yq -r '.appVersion'      helm/Chart.yaml)
   beeai_cli_version=$(yq -r '.project.version' apps/beeai-cli/pyproject.toml)
beeai_server_version=$(yq -r '.project.version' apps/beeai-server/pyproject.toml)
    beeai_ui_version=$(yq -r '.version'         apps/beeai-ui/package.json)
   beeai_web_version=$(yq -r '.version'         apps/beeai-web/package.json)

if [ "$helm_version" != "$helm_app_version" ] || \
   [ "$helm_version" != "$beeai_cli_version" ] || \
   [ "$helm_version" != "$beeai_server_version" ] || \
   [ "$helm_version" != "$beeai_ui_version" ] || \
   [ "$helm_version" != "$beeai_web_version" ]; then
  echo "Version mismatch:"
  echo "  helm.version:     $helm_version"
  echo "  helm.appVersion:  $helm_app_version"
  echo "  beeai-cli:        $beeai_cli_version"
  echo "  beeai-server:     $beeai_server_version"
  echo "  beeai-ui:         $beeai_ui_version"
  echo "  beeai-web:        $beeai_web_version"
  exit 1
fi

if ! [[ "$helm_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
  echo "ERROR: Invalid version format. Use #.#.# or #.#.#-rc#"
  exit 1
fi

if [[ "$GITHUB_REF" == refs/tags/v* && "$GITHUB_REF" != "refs/tags/v$helm_version" ]]; then
  echo "GITHUB_REF '$GITHUB_REF' does not match expected 'refs/tags/v$helm_version'"
  exit 1
fi
'''

### fix

["common:fix"]
depends = ["common:fix:*"]

["common:fix:license"]
dir = "{{config_root}}"
run = "addlicense -l apache -s=only -c '© BeeAI a Series of LF Projects, LLC' $(fd '\\.(py|[jt]sx?|html|s?css)$')"

### test

["common:test"]
run = "true" # Empty tests in case there are no tests

# Platform tasks

["beeai-platform:start"]
depends = ["beeai-server:build"]
dir = "{{config_root}}"
run = """
#!/bin/bash
set -e

UI_IMPORT=""
UI_TAG=""

if [[ ! "$*" =~ 'ui.enabled=false' ]]; then
    {{ mise_bin }} run beeai-ui:build:image
    UI_IMPORT="--import ghcr.io/i-am-bee/beeai-platform/beeai-ui:local"
    UI_TAG="--set ui.image.tag=local"
fi

{{ mise_bin }} run beeai-cli:run -- platform start \
    --import "ghcr.io/i-am-bee/beeai-platform/beeai-server:local" \
    $UI_IMPORT \
    --set image.tag=local \
    $UI_TAG "$@"
"""

["beeai-platform:delete"]
run = "{{ mise_bin }} run beeai-cli:run -- platform delete"

["beeai-platform:stop"]
run = "{{ mise_bin }} run beeai-cli:run -- platform stop"


["beeai-platform:stop-all"]
run = """
#!/bin/bash
# Stop all lima VMs

EXCEPT='{{option(name="except", default="")}}'

{% raw %}
TO_DELETE="$(LIMA_HOME=~/.beeai/lima limactl list -f '{{.Name}}' 2>/dev/null | sed '/^[^a-z]*$/d' | sed "/^$EXCEPT$/d")"
{% endraw %}

{% raw %}
echo "$TO_DELETE" | xargs -rn 1 -I"{}" mise run beeai-cli:run -- platform stop --vm-name="{}"
{% endraw %}
"""

["beeai-platform:shell"]
raw = true
shell = "echo"
dir = "{{cwd}}"
run = """
deactivate () {
  export PS1="$__OLD_PS1"

  # Restore LIMA_HOME to its original state (set or unset)
  [[ -n "$__OLD_LIMA_HOME" ]] && export LIMA_HOME="$__OLD_LIMA_HOME" || unset LIMA_HOME
  [[ -n "$__OLD_KUBECONFIG" ]] && export KUBECONFIG="$__OLD_KUBECONFIG" || unset KUBECONFIG

  # Clean up the backup values
  unset __OLD_PS1
  unset __OLD_LIMA_HOME
  unset __OLD_KUBECONFIG
  unset -f deactivate
  echo "Environment for '$VM_NAME' deactivated."
}

while [[ -n "$__OLD_PS1" ]]; do
  deactivate;
done

VM_NAME={{option(name="vm-name", default="beeai-platform")}}
echo "Activating environment for '$VM_NAME'..."

export __OLD_PS1="$PS1"
export __OLD_LIMA_HOME="$LIMA_HOME"
export __OLD_KUBECONFIG="$KUBECONFIG"

export KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"
export LIMA_HOME=~/.beeai/lima
export PS1="(${VM_NAME}) ${__OLD_PS1}"

"""

["release"]
dir = "{{config_root}}"
run = '''
#!/bin/bash
set -eu -o pipefail

# Ensure on main branch
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$current_branch" != "main" ]]; then
  echo "ERROR: You must be on the 'main' branch (current: $current_branch)"
  exit 1
fi

# Ensure working directory is clean
if [[ -n "$(git status --porcelain)" ]]; then
  echo "ERROR: Working directory not clean"
  git status
  exit 1
fi

# Prompt for version bump with validation
current_version=$(yq -r '.version' helm/Chart.yaml)
while true; do
  read -p "Bump from ${current_version} to: " new_version
  if [[ "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
    break
  else
    echo "ERROR: Invalid version format. Use #.#.# or #.#.#-rc#"
    exit 1
  fi
done

# Update all version fields
yq -i ".version = \"$new_version\"" helm/Chart.yaml
yq -i ".appVersion = \"$new_version\"" helm/Chart.yaml
(cd apps/beeai-cli && toml set 'project.version' "$new_version" --toml-path pyproject.toml && uv lock)
(cd apps/beeai-server && toml set 'project.version' "$new_version" --toml-path pyproject.toml && uv lock)
yq -i ".version = \"$new_version\"" apps/beeai-ui/package.json
yq -i ".version = \"$new_version\"" apps/beeai-web/package.json

# Confirm commit and push (default: yes)
read -p "Commit and push? [Y/n] " confirm
if [[ "${confirm:-y}" =~ ^[Yy]$ ]]; then
  (
    set -eux -o pipefail
    git add helm/Chart.yaml apps/beeai-{cli,server}/{uv.lock,pyproject.toml} apps/beeai-{ui,web}/package.json
    git commit -m "release: v$new_version"
    git tag "v$new_version"
    git push --atomic origin main "v$new_version"
  )
fi
'''
