## grouped tasks

["setup"]
depends = ["*:setup"]

["check"]
depends = ["*:check"]

["fix"]
depends = ["*:fix"]

["test"]
depends = ["*:test"]

## git hooks

["git-hooks:pre-commit"]
hide = true
depends = ["check"]

## common tasks

### setup

["common:setup"]
depends = ["common:setup:*"]

["common:setup:mise-local-toml"]
hide = true
dir = "{{config_root}}"
run = "test -f mise.local.toml || cp mise.local.toml-example mise.local.toml"
sources = ["mise.local.toml-example"]
outputs = { auto = true }

["common:setup:git-hooks"]
hide = true
dir = "{{config_root}}"
run = "test ! -d .git || (printf '#!/bin/sh\n{{ mise_bin }} run git-hooks:pre-commit' >.git/hooks/pre-commit && chmod +x .git/hooks/pre-commit)"
sources = [".git/hooks/pre-commit"]
outputs = { auto = true }

["common:setup:pnpm"]
hide = true
dir = "{{config_root}}"
run = "pnpm install"
sources = ["pnpm-lock.yaml", "pnpm-workspace.yaml", "apps/*/package.json", "docs/package.json", "agents/*/*/package.json"]
outputs = { auto = true }

### check

["common:check"]
depends = ["common:check:*"]

["common:check:license"]
dir = "{{config_root}}"
run = "addlicense -check -l apache -s=only -c '© BeeAI a Series of LF Projects, LLC' $(fd '\\.(py|[jt]sx?|html|s?css)$')"

["common:check:version"]
dir = "{{config_root}}"
run = '''
#!/usr/bin/env bash
set -euo pipefail
version=$(
  {
    yq -r .version              helm/Chart.yaml
    yq -r .appVersion           helm/Chart.yaml
    yq -r .project.version      apps/beeai-cli/pyproject.toml
    yq -r .project.version      apps/beeai-sdk/pyproject.toml
    yq -r .project.version      apps/beeai-server/pyproject.toml
    yq -r .version              apps/beeai-ui/package.json
    yq -r .version              apps/beeai-web/package.json
    yq -r '.providers[].location | split(":")[-1]' agent-registry.yaml
  } | sort -u
)
if [[ $(wc -l <<<"$version") -ne 1 ]]; then echo "ERROR: Version mismatch detected: $(echo $version)" >&2; exit 1; fi
if ! [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then echo "ERROR: $version is not valid semver (X.Y.Z or X.Y.Z-rcN)" >&2; exit 1; fi
if [[ "${GITHUB_REF:-}" == refs/tags/* ]] && [[ $GITHUB_REF != "refs/tags/v$version" ]]; then echo "ERROR: GITHUB_REF '$GITHUB_REF' does not match 'refs/tags/v$version'" >&2; exit 1; fi
'''

### fix

["common:fix"]
depends = ["common:fix:*"]

["common:fix:license"]
dir = "{{config_root}}"
run = "addlicense -l apache -s=only -c '© BeeAI a Series of LF Projects, LLC' $(fd '\\.(py|[jt]sx?|html|s?css)$')"

### test

["common:test"]
run = "true" # Empty tests in case there are no tests

# Platform tasks

["beeai-platform:start"]
depends = ["beeai-server:build"]
dir = "{{config_root}}"
run = """
#!/bin/bash
set -e

UI_IMPORT=""
UI_TAG=""

if [[ ! "$*" =~ 'ui.enabled=false' ]]; then
    {{ mise_bin }} run beeai-ui:build
    UI_IMPORT="--import ghcr.io/i-am-bee/beeai-platform/beeai-ui:local"
    UI_TAG="--set ui.image.tag=local"
fi

{{ mise_bin }} run beeai-cli:run -- platform start \
    --import "ghcr.io/i-am-bee/beeai-platform/beeai-server:local" \
    $UI_IMPORT \
    --set image.tag=local \
    $UI_TAG "$@"
"""

["beeai-platform:delete"]
run = "{{ mise_bin }} run beeai-cli:run -- platform delete"

["beeai-platform:stop"]
run = "{{ mise_bin }} run beeai-cli:run -- platform stop"


["beeai-platform:stop-all"]
run = """
#!/bin/bash
# Stop all lima VMs

EXCEPT='{{option(name="except", default="")}}'

{% raw %}
TO_DELETE="$(LIMA_HOME=~/.beeai/lima limactl list -f '{{.Name}}' 2>/dev/null | sed '/^[^a-z]*$/d' | sed "/^$EXCEPT$/d")"
{% endraw %}

{% raw %}
echo "$TO_DELETE" | xargs -rn 1 -I"{}" mise run beeai-cli:run -- platform stop --vm-name="{}"
{% endraw %}
"""

["beeai-platform:shell"]
raw = true
shell = "echo"
dir = "{{cwd}}"
run = """
deactivate () {
  export PS1="$__OLD_PS1"

  # Restore LIMA_HOME to its original state (set or unset)
  [[ -n "$__OLD_LIMA_HOME" ]] && export LIMA_HOME="$__OLD_LIMA_HOME" || unset LIMA_HOME
  [[ -n "$__OLD_KUBECONFIG" ]] && export KUBECONFIG="$__OLD_KUBECONFIG" || unset KUBECONFIG

  # Clean up the backup values
  unset __OLD_PS1
  unset __OLD_LIMA_HOME
  unset __OLD_KUBECONFIG
  unset -f deactivate
  echo "Environment for '$VM_NAME' deactivated."
}

while [[ -n "$__OLD_PS1" ]]; do
  deactivate;
done

VM_NAME={{option(name="vm-name", default="beeai-platform")}}
echo "Activating environment for '$VM_NAME'..."

export __OLD_PS1="$PS1"
export __OLD_LIMA_HOME="$LIMA_HOME"
export __OLD_KUBECONFIG="$KUBECONFIG"

export KUBECONFIG="${HOME}/.beeai/lima/${VM_NAME}/copied-from-guest/kubeconfig.yaml"
export LIMA_HOME=~/.beeai/lima
export PS1="(${VM_NAME}) ${__OLD_PS1}"

"""

["release"]
dir = "{{config_root}}"
run = '''
#!/bin/bash
set -eu -o pipefail

# Ensure on main branch
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$current_branch" != "main" ]]; then
  echo "ERROR: You must be on the 'main' branch (current: $current_branch)"
  exit 1
fi

# Ensure working directory is clean
if [[ -n "$(git status --porcelain)" ]]; then
  echo "ERROR: Working directory not clean"
  git status
  exit 1
fi

current_version=$(yq -r '.version' helm/Chart.yaml)

# Compute suggested next rc version
if [[ "$current_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-rc([0-9]+))?$ ]]; then
  if [[ -n "${BASH_REMATCH[5]}" ]]; then
    suggested_new_version="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}-rc$((${BASH_REMATCH[5]} + 1))"
  else
    suggested_new_version="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.$((${BASH_REMATCH[3]} + 1))-rc1"
  fi
else
  echo "ERROR: Invalid version format of current version. Use #.#.#[-rc#]"
  exit 1
fi

# Prompt for new version
new_version=$(gum input --prompt.foreground="8" --prompt "Bump from ${current_version} -> " --value "$suggested_new_version")
if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
  echo "ERROR: Invalid version format of new version. Use #.#.#[-rc#]"
  exit 1
fi

# Update all version fields
yq -i ".version = \"$new_version\"" helm/Chart.yaml
yq -i ".appVersion = \"$new_version\"" helm/Chart.yaml
(cd apps/beeai-sdk && toml set 'project.version' "$new_version" --toml-path pyproject.toml && uv lock)
(cd apps/beeai-cli && toml set 'project.version' "$new_version" --toml-path pyproject.toml && uv lock)
(cd apps/beeai-server && toml set 'project.version' "$new_version" --toml-path pyproject.toml && uv lock)
yq -i ".version = \"$new_version\"" apps/beeai-ui/package.json
yq -i ".version = \"$new_version\"" apps/beeai-web/package.json
yq -i ".providers[].location |= sub(\":(.*)\$\"; \":\" + \"$new_version\")" agent-registry.yaml

# Confirm commit and push
if gum confirm "Release version $new_version now?"; then
  (
    set -eux -o pipefail
    git add agent-registry.yaml helm/Chart.yaml apps/beeai-{cli,server,sdk}/{uv.lock,pyproject.toml} apps/beeai-{ui,web}/package.json
    git commit -m "release: v$new_version"
    git tag "v$new_version"
    git push --atomic origin main "v$new_version"
  )
  if gum confirm "Follow GitHub Action? (Requires gh CLI.)"; then
    gum spin --title="Waiting for GitHub Action to start..." sleep 10
    gh run watch $(gh run list --workflow=Release --branch=v$new_version --limit=1 --json databaseId,status -q '.[0].databaseId') || true
  fi
fi
'''
